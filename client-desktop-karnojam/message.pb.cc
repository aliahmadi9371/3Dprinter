// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Job3D_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MachineConfig_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaterialConfig_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionConfig_message_2eproto;
namespace network_messages {
class NetServerCommandsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetServerCommands> _instance;
} _NetServerCommands_default_instance_;
class NetClientResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetClientRes> _instance;
} _NetClientRes_default_instance_;
class PrintProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrintProgress> _instance;
} _PrintProgress_default_instance_;
class MachineConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MachineConfig> _instance;
} _MachineConfig_default_instance_;
class MaterialConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaterialConfig> _instance;
} _MaterialConfig_default_instance_;
class MotionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionConfig> _instance;
} _MotionConfig_default_instance_;
class Job3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Job3D> _instance;
} _Job3D_default_instance_;
}  // namespace network_messages
static void InitDefaultsscc_info_Job3D_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network_messages::_Job3D_default_instance_;
    new (ptr) ::network_messages::Job3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Job3D_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Job3D_message_2eproto}, {}};

static void InitDefaultsscc_info_MachineConfig_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network_messages::_MachineConfig_default_instance_;
    new (ptr) ::network_messages::MachineConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MachineConfig_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MachineConfig_message_2eproto}, {}};

static void InitDefaultsscc_info_MaterialConfig_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network_messages::_MaterialConfig_default_instance_;
    new (ptr) ::network_messages::MaterialConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaterialConfig_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaterialConfig_message_2eproto}, {}};

static void InitDefaultsscc_info_MotionConfig_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network_messages::_MotionConfig_default_instance_;
    new (ptr) ::network_messages::MotionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionConfig_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MotionConfig_message_2eproto}, {}};

static void InitDefaultsscc_info_NetClientRes_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network_messages::_NetClientRes_default_instance_;
    new (ptr) ::network_messages::NetClientRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NetClientRes_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_NetClientRes_message_2eproto}, {
      &scc_info_MachineConfig_message_2eproto.base,
      &scc_info_MaterialConfig_message_2eproto.base,
      &scc_info_MotionConfig_message_2eproto.base,
      &scc_info_Job3D_message_2eproto.base,}};

static void InitDefaultsscc_info_NetServerCommands_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network_messages::_NetServerCommands_default_instance_;
    new (ptr) ::network_messages::NetServerCommands();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NetServerCommands_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_NetServerCommands_message_2eproto}, {
      &scc_info_MachineConfig_message_2eproto.base,
      &scc_info_MaterialConfig_message_2eproto.base,
      &scc_info_MotionConfig_message_2eproto.base,
      &scc_info_Job3D_message_2eproto.base,}};

static void InitDefaultsscc_info_PrintProgress_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network_messages::_PrintProgress_default_instance_;
    new (ptr) ::network_messages::PrintProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrintProgress_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrintProgress_message_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, packetcode_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, icalibrstate_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, igopos_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, fmateriallevelmm_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, ffillvacuumsec_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, iprintstate_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, imachinestatus_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, getstatus_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, materialid_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, motionid_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, jobid_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, imanualmv_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, imatpat_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, ilicensestatus_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, irenewlicense_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, irequestedcode_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, ilicensekey_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, machineconf_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, materialconfig_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, motionconfig_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetServerCommands, job3d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, packetcode_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, confs_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, materials_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, motions_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, jobs_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, errormesg_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, progress_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, size_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, currentslice_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, totalslice_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, remaining_time_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, sensorval_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, filebytes_),
  PROTOBUF_FIELD_OFFSET(::network_messages::NetClientRes, md5_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network_messages::PrintProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, packetcode_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, modelcode_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, machineno_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, version_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, subversion_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, needlicense_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, hasdoor_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, haserm_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, buptdownconfig_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, printerunit_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, zupperlimit_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, projectorprotocol_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, noofmaskpoints_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, maxintensity_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, minintensity_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, gprojectwidth_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, gprojectheight_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, rowid_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, maxintensitysensor_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, minintensitysensor_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, hasplunger_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, tdownzhomepos_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, vacuumtimer_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, sensorsetpointvacuum_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, sensorsetpoint_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, sensorthreshold_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, xshift_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MachineConfig, yshift_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, packetcode_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, name_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, layerthickness_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, burninlayers_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, burnincuretime_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, normalcuretime_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, burnintensity_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, intensity_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MaterialConfig, rowid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, packetcode_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, name_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, layer_z_raise_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, layer_z_lower_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, layer_tilt_raise_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, layer_tilt_lower_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, layer_overlift_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, layer_breathe_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, layer_settle_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, layer_tilt_percent_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, cut_off_layers_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, final_overlift_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, base_layer_settle_),
  PROTOBUF_FIELD_OFFSET(::network_messages::MotionConfig, rowid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::network_messages::Job3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::network_messages::Job3D, packetcode_),
  PROTOBUF_FIELD_OFFSET(::network_messages::Job3D, name_),
  PROTOBUF_FIELD_OFFSET(::network_messages::Job3D, size_),
  PROTOBUF_FIELD_OFFSET(::network_messages::Job3D, lastpacket_),
  PROTOBUF_FIELD_OFFSET(::network_messages::Job3D, filebytes_),
  PROTOBUF_FIELD_OFFSET(::network_messages::Job3D, rowid_),
  PROTOBUF_FIELD_OFFSET(::network_messages::Job3D, md5_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::network_messages::NetServerCommands)},
  { 26, -1, sizeof(::network_messages::NetClientRes)},
  { 45, -1, sizeof(::network_messages::PrintProgress)},
  { 50, -1, sizeof(::network_messages::MachineConfig)},
  { 83, -1, sizeof(::network_messages::MaterialConfig)},
  { 97, -1, sizeof(::network_messages::MotionConfig)},
  { 116, -1, sizeof(::network_messages::Job3D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network_messages::_NetServerCommands_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network_messages::_NetClientRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network_messages::_PrintProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network_messages::_MachineConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network_messages::_MaterialConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network_messages::_MotionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::network_messages::_Job3D_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\020network_messages\"\377\n\n\021Ne"
  "tServerCommands\022\022\n\npacketCode\030\024 \001(\r\022\024\n\014i"
  "CalibrState\030\001 \001(\r\022\016\n\006iGoPos\030\002 \001(\r\022\030\n\020fMa"
  "terialLevelmm\030\022 \001(\002\022\026\n\016fFillVacuumSec\030\023 "
  "\001(\002\022\023\n\013iPrintState\030\003 \001(\r\022\026\n\016iMachineStat"
  "us\030\004 \001(\r\022\021\n\tgetstatus\030\005 \001(\r\022\022\n\nmaterialI"
  "d\030\006 \001(\r\022\020\n\010motionId\030\007 \001(\r\022\r\n\005jobId\030\027 \001(\r"
  "\022\021\n\tiManualMV\030\010 \001(\r\022\017\n\007iMatPat\030\t \001(\r\022\026\n\016"
  "iLicenseStatus\030\n \001(\r\022\025\n\riRenewLicense\030\013 "
  "\001(\r\022\026\n\016iRequestedCode\030\014 \003(\014\022\023\n\013iLicenseK"
  "ey\030\r \003(\014\0224\n\013machineConf\030\016 \001(\0132\037.network_"
  "messages.MachineConfig\0228\n\016materialConfig"
  "\030\017 \001(\0132 .network_messages.MaterialConfig"
  "\0224\n\014motionConfig\030\020 \001(\0132\036.network_message"
  "s.MotionConfig\022&\n\005job3D\030\021 \001(\0132\027.network_"
  "messages.Job3D\"\272\001\n\nPacketType\022\022\n\016ZeroPac"
  "ketCode\020\000\022\r\n\tProjector\020\001\022\t\n\005Print\020\002\022\020\n\014M"
  "achinStatus\020\003\022\014\n\010Material\020\004\022\n\n\006Motion\020\005\022"
  "\021\n\rLicenseStatus\020\006\022\007\n\003Job\020\007\022\n\n\006Config\020\010\022"
  "\016\n\nLicenseKey\020\t\022\014\n\010ManualMV\020\n\022\014\n\010GetStat"
  "e\020\013\"\357\002\n\022ProjectorCalibrate\022\021\n\rZeroCalibr"
  "ate\020\000\022\022\n\016StartCalibrate\020\007\022\023\n\017FinishCalib"
  "rate\020\010\022\026\n\017GoHomeCalibrate\020\221\376\377\007\022\030\n\021Positi"
  "onCalibrate\020\241\376\377\007\022\034\n\025LEDIntensityCalibrat"
  "e\020\221\377\377\007\022\034\n\025MaterialTestCalibrate\020\201\377\377\007\022\031\n\025"
  "ProjectorOffCalibrate\020\t\022\027\n\020EjectUpCalibr"
  "ate\020\261\376\377\007\022\031\n\022EjectDownCalibrate\020\262\376\377\007\022\r\n\tL"
  "EDTurnOn\020\013\022\016\n\nLEDTurnOff\020\014\022\017\n\013ShowPatter"
  "n\020\r\022\021\n\rMaterialLevel\020\016\022\016\n\nVacuumFill\020\017\022\r"
  "\n\tGetSensor\020\020\"K\n\nPrintState\022\016\n\nZeroPirin"
  "t\020\000\022\016\n\nStartPrint\020\013\022\r\n\tStopPrint\020\014\022\016\n\nPa"
  "usePrint\020\r\"\276\001\n\014ManualMVStep\022\020\n\014ZeroManua"
  "lMV\020\000\022\016\n\nBuidlOneUp\020e\022\020\n\014BuidlOneDown\020f\022"
  "\016\n\nBuidlTenUp\020o\022\020\n\014BuidlTenDown\020p\022\020\n\014Bui"
  "dlFiftyUp\020y\022\022\n\016BuidlFiftyDown\020z\022\n\n\006TiltU"
  "p\020\r\022\014\n\010TiltDown\020\016\022\n\n\006DoorUp\020\017\022\014\n\010DoorDow"
  "n\020\020\"\217\004\n\014NetClientRes\022\022\n\npacketCode\030\001 \001(\r"
  "\022.\n\005confs\030\002 \003(\0132\037.network_messages.Machi"
  "neConfig\0223\n\tmaterials\030\003 \003(\0132 .network_me"
  "ssages.MaterialConfig\022/\n\007motions\030\004 \003(\0132\036"
  ".network_messages.MotionConfig\022%\n\004jobs\030\005"
  " \003(\0132\027.network_messages.Job3D\022\021\n\terrorMe"
  "sg\030\006 \001(\t\022\020\n\010progress\030\007 \001(\r\022\014\n\004size\030\010 \001(\004"
  "\022\024\n\014currentSlice\030\t \001(\r\022\022\n\ntotalSlice\030\n \001"
  "(\r\022\026\n\016remaining_time\030\014 \001(\004\022\021\n\tsensorVal\030"
  "\r \001(\002\022\021\n\tfileBytes\030\013 \003(\014\022\013\n\003Md5\030\016 \001(\014\"\205\001"
  "\n\nPacketType\022\022\n\016ZeroPacketCode\020\000\022\014\n\010NotF"
  "ound\020\001\022\013\n\007Founded\020\002\022\010\n\004Done\020\003\022\t\n\005Error\020\004"
  "\022\014\n\010Progress\020\005\022\t\n\005Ready\020\006\022\013\n\007ReadVal\020\007\022\r"
  "\n\tCheckFile\020\010\"\017\n\rPrintProgress\"\311\005\n\rMachi"
  "neConfig\022\022\n\npacketCode\030\001 \001(\r\022\021\n\tModelCod"
  "e\030\002 \001(\r\022\021\n\tMachineNo\030\003 \001(\t\022\017\n\007Version\030\004 "
  "\001(\r\022\022\n\nSubVersion\030\005 \001(\r\022\023\n\013NeedLicense\030\006"
  " \001(\010\022\017\n\007HasDoor\030\r \001(\010\022\016\n\006HasErm\030\016 \001(\010\022\026\n"
  "\016BUpTDownConfig\030\021 \001(\010\022\023\n\013PrinterUnit\030\007 \001"
  "(\002\022\023\n\013ZUpperLimit\030\010 \001(\r\022\031\n\021ProjectorProt"
  "ocol\030\t \001(\r\022\026\n\016NoOfMaskPoints\030\n \001(\r\022\024\n\014Ma"
  "xIntensity\030\013 \001(\r\022\024\n\014MinIntensity\030\014 \001(\r\022\025"
  "\n\rgProjectWidth\030\017 \001(\r\022\026\n\016gProjectHeight\030"
  "\020 \001(\r\022\r\n\005rowId\030\022 \001(\r\022\032\n\022MaxIntensitySens"
  "or\030\033 \001(\r\022\032\n\022MinIntensitySensor\030\034 \001(\r\022\022\n\n"
  "HasPlunger\030\023 \001(\010\022\025\n\rTDownZHomePos\030\024 \001(\r\022"
  "\023\n\013vacuumTimer\030\025 \001(\002\022\034\n\024SensorSetPointVa"
  "cuum\030\026 \001(\002\022\026\n\016SensorSetPoint\030\027 \001(\002\022\027\n\017Se"
  "nsorThreshold\030\030 \001(\002\022\016\n\006XShift\030\031 \001(\002\022\016\n\006Y"
  "Shift\030\032 \001(\002\"]\n\nPacketType\022\022\n\016ZeroPacketC"
  "ode\020\000\022\007\n\003Add\020\001\022\010\n\004Edit\020\002\022\n\n\006Delete\020\003\022\007\n\003"
  "Get\020\004\022\n\n\006GetALL\020\005\022\007\n\003SET\020\006\"\237\002\n\016MaterialC"
  "onfig\022\022\n\npacketCode\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022"
  "\026\n\016LayerThickness\030\003 \001(\r\022\024\n\014BurnInLayers\030"
  "\004 \001(\r\022\026\n\016BurnInCureTime\030\005 \001(\002\022\026\n\016NormalC"
  "ureTime\030\006 \001(\002\022\025\n\rBurnIntensity\030\007 \001(\002\022\021\n\t"
  "Intensity\030\010 \001(\002\022\r\n\005rowId\030\t \001(\r\"T\n\nPacket"
  "Type\022\022\n\016ZeroPacketCode\020\000\022\007\n\003Add\020\001\022\010\n\004Edi"
  "t\020\002\022\n\n\006Delete\020\003\022\007\n\003Get\020\004\022\n\n\006GetALL\020\005\"\243\003\n"
  "\014MotionConfig\022\022\n\npacketCode\030\001 \001(\r\022\014\n\004Nam"
  "e\030\002 \001(\t\022\025\n\rLayer_Z_Raise\030\003 \003(\r\022\025\n\rLayer_"
  "Z_Lower\030\004 \003(\r\022\030\n\020Layer_Tilt_Raise\030\005 \003(\r\022"
  "\030\n\020Layer_Tilt_Lower\030\006 \003(\r\022\026\n\016Layer_Overl"
  "ift\030\007 \003(\r\022\025\n\rLayer_Breathe\030\010 \003(\r\022\024\n\014Laye"
  "r_Settle\030\t \003(\r\022\032\n\022Layer_Tilt_Percent\030\n \003"
  "(\r\022\026\n\016Cut_Off_Layers\030\013 \001(\r\022\026\n\016Final_Over"
  "Lift\030\014 \001(\r\022\031\n\021Base_Layer_settle\030\r \001(\r\022\r\n"
  "\005rowId\030\016 \001(\r\"T\n\nPacketType\022\022\n\016ZeroPacket"
  "Code\020\000\022\007\n\003Add\020\001\022\010\n\004Edit\020\002\022\n\n\006Delete\020\003\022\007\n"
  "\003Get\020\004\022\n\n\006GetALL\020\005\"\337\001\n\005Job3D\022\022\n\npacketCo"
  "de\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\022\014\n\004Size\030\003 \001(\004\022\022\n\n"
  "lastPacket\030\004 \001(\010\022\021\n\tfileBytes\030\005 \003(\014\022\r\n\005r"
  "owId\030\006 \001(\r\022\013\n\003Md5\030\007 \001(\010\"c\n\nPacketType\022\022\n"
  "\016ZeroPacketCode\020\000\022\007\n\003Add\020\001\022\010\n\004Edit\020\002\022\n\n\006"
  "Delete\020\003\022\007\n\003Get\020\004\022\n\n\006GetALL\020\005\022\r\n\tCheckFi"
  "le\020\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[7] = {
  &scc_info_Job3D_message_2eproto.base,
  &scc_info_MachineConfig_message_2eproto.base,
  &scc_info_MaterialConfig_message_2eproto.base,
  &scc_info_MotionConfig_message_2eproto.base,
  &scc_info_NetClientRes_message_2eproto.base,
  &scc_info_NetServerCommands_message_2eproto.base,
  &scc_info_PrintProgress_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, descriptor_table_protodef_message_2eproto, "message.proto", 3652,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 7, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto)), true);
namespace network_messages {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetServerCommands_PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool NetServerCommands_PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetServerCommands_PacketType NetServerCommands::ZeroPacketCode;
constexpr NetServerCommands_PacketType NetServerCommands::Projector;
constexpr NetServerCommands_PacketType NetServerCommands::Print;
constexpr NetServerCommands_PacketType NetServerCommands::MachinStatus;
constexpr NetServerCommands_PacketType NetServerCommands::Material;
constexpr NetServerCommands_PacketType NetServerCommands::Motion;
constexpr NetServerCommands_PacketType NetServerCommands::LicenseStatus;
constexpr NetServerCommands_PacketType NetServerCommands::Job;
constexpr NetServerCommands_PacketType NetServerCommands::Config;
constexpr NetServerCommands_PacketType NetServerCommands::LicenseKey;
constexpr NetServerCommands_PacketType NetServerCommands::ManualMV;
constexpr NetServerCommands_PacketType NetServerCommands::GetState;
constexpr NetServerCommands_PacketType NetServerCommands::PacketType_MIN;
constexpr NetServerCommands_PacketType NetServerCommands::PacketType_MAX;
constexpr int NetServerCommands::PacketType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetServerCommands_ProjectorCalibrate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool NetServerCommands_ProjectorCalibrate_IsValid(int value) {
  switch (value) {
    case 0:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 16776977:
    case 16776993:
    case 16777009:
    case 16777010:
    case 16777089:
    case 16777105:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::ZeroCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::StartCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::FinishCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::GoHomeCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::PositionCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::LEDIntensityCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::MaterialTestCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::ProjectorOffCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::EjectUpCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::EjectDownCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::LEDTurnOn;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::LEDTurnOff;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::ShowPattern;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::MaterialLevel;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::VacuumFill;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::GetSensor;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::ProjectorCalibrate_MIN;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands::ProjectorCalibrate_MAX;
constexpr int NetServerCommands::ProjectorCalibrate_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetServerCommands_PrintState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[2];
}
bool NetServerCommands_PrintState_IsValid(int value) {
  switch (value) {
    case 0:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetServerCommands_PrintState NetServerCommands::ZeroPirint;
constexpr NetServerCommands_PrintState NetServerCommands::StartPrint;
constexpr NetServerCommands_PrintState NetServerCommands::StopPrint;
constexpr NetServerCommands_PrintState NetServerCommands::PausePrint;
constexpr NetServerCommands_PrintState NetServerCommands::PrintState_MIN;
constexpr NetServerCommands_PrintState NetServerCommands::PrintState_MAX;
constexpr int NetServerCommands::PrintState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetServerCommands_ManualMVStep_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[3];
}
bool NetServerCommands_ManualMVStep_IsValid(int value) {
  switch (value) {
    case 0:
    case 13:
    case 14:
    case 15:
    case 16:
    case 101:
    case 102:
    case 111:
    case 112:
    case 121:
    case 122:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetServerCommands_ManualMVStep NetServerCommands::ZeroManualMV;
constexpr NetServerCommands_ManualMVStep NetServerCommands::BuidlOneUp;
constexpr NetServerCommands_ManualMVStep NetServerCommands::BuidlOneDown;
constexpr NetServerCommands_ManualMVStep NetServerCommands::BuidlTenUp;
constexpr NetServerCommands_ManualMVStep NetServerCommands::BuidlTenDown;
constexpr NetServerCommands_ManualMVStep NetServerCommands::BuidlFiftyUp;
constexpr NetServerCommands_ManualMVStep NetServerCommands::BuidlFiftyDown;
constexpr NetServerCommands_ManualMVStep NetServerCommands::TiltUp;
constexpr NetServerCommands_ManualMVStep NetServerCommands::TiltDown;
constexpr NetServerCommands_ManualMVStep NetServerCommands::DoorUp;
constexpr NetServerCommands_ManualMVStep NetServerCommands::DoorDown;
constexpr NetServerCommands_ManualMVStep NetServerCommands::ManualMVStep_MIN;
constexpr NetServerCommands_ManualMVStep NetServerCommands::ManualMVStep_MAX;
constexpr int NetServerCommands::ManualMVStep_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetClientRes_PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[4];
}
bool NetClientRes_PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetClientRes_PacketType NetClientRes::ZeroPacketCode;
constexpr NetClientRes_PacketType NetClientRes::NotFound;
constexpr NetClientRes_PacketType NetClientRes::Founded;
constexpr NetClientRes_PacketType NetClientRes::Done;
constexpr NetClientRes_PacketType NetClientRes::Error;
constexpr NetClientRes_PacketType NetClientRes::Progress;
constexpr NetClientRes_PacketType NetClientRes::Ready;
constexpr NetClientRes_PacketType NetClientRes::ReadVal;
constexpr NetClientRes_PacketType NetClientRes::CheckFile;
constexpr NetClientRes_PacketType NetClientRes::PacketType_MIN;
constexpr NetClientRes_PacketType NetClientRes::PacketType_MAX;
constexpr int NetClientRes::PacketType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MachineConfig_PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[5];
}
bool MachineConfig_PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MachineConfig_PacketType MachineConfig::ZeroPacketCode;
constexpr MachineConfig_PacketType MachineConfig::Add;
constexpr MachineConfig_PacketType MachineConfig::Edit;
constexpr MachineConfig_PacketType MachineConfig::Delete;
constexpr MachineConfig_PacketType MachineConfig::Get;
constexpr MachineConfig_PacketType MachineConfig::GetALL;
constexpr MachineConfig_PacketType MachineConfig::SET;
constexpr MachineConfig_PacketType MachineConfig::PacketType_MIN;
constexpr MachineConfig_PacketType MachineConfig::PacketType_MAX;
constexpr int MachineConfig::PacketType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MaterialConfig_PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[6];
}
bool MaterialConfig_PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MaterialConfig_PacketType MaterialConfig::ZeroPacketCode;
constexpr MaterialConfig_PacketType MaterialConfig::Add;
constexpr MaterialConfig_PacketType MaterialConfig::Edit;
constexpr MaterialConfig_PacketType MaterialConfig::Delete;
constexpr MaterialConfig_PacketType MaterialConfig::Get;
constexpr MaterialConfig_PacketType MaterialConfig::GetALL;
constexpr MaterialConfig_PacketType MaterialConfig::PacketType_MIN;
constexpr MaterialConfig_PacketType MaterialConfig::PacketType_MAX;
constexpr int MaterialConfig::PacketType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionConfig_PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[7];
}
bool MotionConfig_PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MotionConfig_PacketType MotionConfig::ZeroPacketCode;
constexpr MotionConfig_PacketType MotionConfig::Add;
constexpr MotionConfig_PacketType MotionConfig::Edit;
constexpr MotionConfig_PacketType MotionConfig::Delete;
constexpr MotionConfig_PacketType MotionConfig::Get;
constexpr MotionConfig_PacketType MotionConfig::GetALL;
constexpr MotionConfig_PacketType MotionConfig::PacketType_MIN;
constexpr MotionConfig_PacketType MotionConfig::PacketType_MAX;
constexpr int MotionConfig::PacketType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Job3D_PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[8];
}
bool Job3D_PacketType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Job3D_PacketType Job3D::ZeroPacketCode;
constexpr Job3D_PacketType Job3D::Add;
constexpr Job3D_PacketType Job3D::Edit;
constexpr Job3D_PacketType Job3D::Delete;
constexpr Job3D_PacketType Job3D::Get;
constexpr Job3D_PacketType Job3D::GetALL;
constexpr Job3D_PacketType Job3D::CheckFile;
constexpr Job3D_PacketType Job3D::PacketType_MIN;
constexpr Job3D_PacketType Job3D::PacketType_MAX;
constexpr int Job3D::PacketType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class NetServerCommands::_Internal {
 public:
  static const ::network_messages::MachineConfig& machineconf(const NetServerCommands* msg);
  static const ::network_messages::MaterialConfig& materialconfig(const NetServerCommands* msg);
  static const ::network_messages::MotionConfig& motionconfig(const NetServerCommands* msg);
  static const ::network_messages::Job3D& job3d(const NetServerCommands* msg);
};

const ::network_messages::MachineConfig&
NetServerCommands::_Internal::machineconf(const NetServerCommands* msg) {
  return *msg->machineconf_;
}
const ::network_messages::MaterialConfig&
NetServerCommands::_Internal::materialconfig(const NetServerCommands* msg) {
  return *msg->materialconfig_;
}
const ::network_messages::MotionConfig&
NetServerCommands::_Internal::motionconfig(const NetServerCommands* msg) {
  return *msg->motionconfig_;
}
const ::network_messages::Job3D&
NetServerCommands::_Internal::job3d(const NetServerCommands* msg) {
  return *msg->job3d_;
}
NetServerCommands::NetServerCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  irequestedcode_(arena),
  ilicensekey_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network_messages.NetServerCommands)
}
NetServerCommands::NetServerCommands(const NetServerCommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      irequestedcode_(from.irequestedcode_),
      ilicensekey_(from.ilicensekey_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_machineconf()) {
    machineconf_ = new ::network_messages::MachineConfig(*from.machineconf_);
  } else {
    machineconf_ = nullptr;
  }
  if (from._internal_has_materialconfig()) {
    materialconfig_ = new ::network_messages::MaterialConfig(*from.materialconfig_);
  } else {
    materialconfig_ = nullptr;
  }
  if (from._internal_has_motionconfig()) {
    motionconfig_ = new ::network_messages::MotionConfig(*from.motionconfig_);
  } else {
    motionconfig_ = nullptr;
  }
  if (from._internal_has_job3d()) {
    job3d_ = new ::network_messages::Job3D(*from.job3d_);
  } else {
    job3d_ = nullptr;
  }
  ::memcpy(&icalibrstate_, &from.icalibrstate_,
    static_cast<size_t>(reinterpret_cast<char*>(&jobid_) -
    reinterpret_cast<char*>(&icalibrstate_)) + sizeof(jobid_));
  // @@protoc_insertion_point(copy_constructor:network_messages.NetServerCommands)
}

void NetServerCommands::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetServerCommands_message_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&machineconf_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&jobid_) -
      reinterpret_cast<char*>(&machineconf_)) + sizeof(jobid_));
}

NetServerCommands::~NetServerCommands() {
  // @@protoc_insertion_point(destructor:network_messages.NetServerCommands)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetServerCommands::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete machineconf_;
  if (this != internal_default_instance()) delete materialconfig_;
  if (this != internal_default_instance()) delete motionconfig_;
  if (this != internal_default_instance()) delete job3d_;
}

void NetServerCommands::ArenaDtor(void* object) {
  NetServerCommands* _this = reinterpret_cast< NetServerCommands* >(object);
  (void)_this;
}
void NetServerCommands::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetServerCommands::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetServerCommands& NetServerCommands::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetServerCommands_message_2eproto.base);
  return *internal_default_instance();
}


void NetServerCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:network_messages.NetServerCommands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  irequestedcode_.Clear();
  ilicensekey_.Clear();
  if (GetArena() == nullptr && machineconf_ != nullptr) {
    delete machineconf_;
  }
  machineconf_ = nullptr;
  if (GetArena() == nullptr && materialconfig_ != nullptr) {
    delete materialconfig_;
  }
  materialconfig_ = nullptr;
  if (GetArena() == nullptr && motionconfig_ != nullptr) {
    delete motionconfig_;
  }
  motionconfig_ = nullptr;
  if (GetArena() == nullptr && job3d_ != nullptr) {
    delete job3d_;
  }
  job3d_ = nullptr;
  ::memset(&icalibrstate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jobid_) -
      reinterpret_cast<char*>(&icalibrstate_)) + sizeof(jobid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetServerCommands::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 iCalibrState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          icalibrstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iGoPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          igopos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iPrintState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          iprintstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iMachineStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          imachinestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 getstatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          getstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 materialId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          materialid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 motionId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          motionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iManualMV = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          imanualmv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iMatPat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          imatpat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iLicenseStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ilicensestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iRenewLicense = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          irenewlicense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes iRequestedCode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_irequestedcode();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes iLicenseKey = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ilicensekey();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .network_messages.MachineConfig machineConf = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_machineconf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .network_messages.MaterialConfig materialConfig = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_materialconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .network_messages.MotionConfig motionConfig = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_motionconfig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .network_messages.Job3D job3D = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_job3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fMaterialLevelmm = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          fmateriallevelmm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fFillVacuumSec = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          ffillvacuumsec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 packetCode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          packetcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 jobId = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          jobid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetServerCommands::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network_messages.NetServerCommands)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 iCalibrState = 1;
  if (this->icalibrstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_icalibrstate(), target);
  }

  // uint32 iGoPos = 2;
  if (this->igopos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_igopos(), target);
  }

  // uint32 iPrintState = 3;
  if (this->iprintstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_iprintstate(), target);
  }

  // uint32 iMachineStatus = 4;
  if (this->imachinestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_imachinestatus(), target);
  }

  // uint32 getstatus = 5;
  if (this->getstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_getstatus(), target);
  }

  // uint32 materialId = 6;
  if (this->materialid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_materialid(), target);
  }

  // uint32 motionId = 7;
  if (this->motionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_motionid(), target);
  }

  // uint32 iManualMV = 8;
  if (this->imanualmv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_imanualmv(), target);
  }

  // uint32 iMatPat = 9;
  if (this->imatpat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_imatpat(), target);
  }

  // uint32 iLicenseStatus = 10;
  if (this->ilicensestatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ilicensestatus(), target);
  }

  // uint32 iRenewLicense = 11;
  if (this->irenewlicense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_irenewlicense(), target);
  }

  // repeated bytes iRequestedCode = 12;
  for (int i = 0, n = this->_internal_irequestedcode_size(); i < n; i++) {
    const auto& s = this->_internal_irequestedcode(i);
    target = stream->WriteBytes(12, s, target);
  }

  // repeated bytes iLicenseKey = 13;
  for (int i = 0, n = this->_internal_ilicensekey_size(); i < n; i++) {
    const auto& s = this->_internal_ilicensekey(i);
    target = stream->WriteBytes(13, s, target);
  }

  // .network_messages.MachineConfig machineConf = 14;
  if (this->has_machineconf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::machineconf(this), target, stream);
  }

  // .network_messages.MaterialConfig materialConfig = 15;
  if (this->has_materialconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::materialconfig(this), target, stream);
  }

  // .network_messages.MotionConfig motionConfig = 16;
  if (this->has_motionconfig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::motionconfig(this), target, stream);
  }

  // .network_messages.Job3D job3D = 17;
  if (this->has_job3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::job3d(this), target, stream);
  }

  // float fMaterialLevelmm = 18;
  if (!(this->fmateriallevelmm() <= 0 && this->fmateriallevelmm() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_fmateriallevelmm(), target);
  }

  // float fFillVacuumSec = 19;
  if (!(this->ffillvacuumsec() <= 0 && this->ffillvacuumsec() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_ffillvacuumsec(), target);
  }

  // uint32 packetCode = 20;
  if (this->packetcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_packetcode(), target);
  }

  // uint32 jobId = 23;
  if (this->jobid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_jobid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network_messages.NetServerCommands)
  return target;
}

size_t NetServerCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network_messages.NetServerCommands)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes iRequestedCode = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(irequestedcode_.size());
  for (int i = 0, n = irequestedcode_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      irequestedcode_.Get(i));
  }

  // repeated bytes iLicenseKey = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ilicensekey_.size());
  for (int i = 0, n = ilicensekey_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      ilicensekey_.Get(i));
  }

  // .network_messages.MachineConfig machineConf = 14;
  if (this->has_machineconf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machineconf_);
  }

  // .network_messages.MaterialConfig materialConfig = 15;
  if (this->has_materialconfig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *materialconfig_);
  }

  // .network_messages.MotionConfig motionConfig = 16;
  if (this->has_motionconfig()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motionconfig_);
  }

  // .network_messages.Job3D job3D = 17;
  if (this->has_job3d()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job3d_);
  }

  // uint32 iCalibrState = 1;
  if (this->icalibrstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icalibrstate());
  }

  // uint32 iGoPos = 2;
  if (this->igopos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_igopos());
  }

  // uint32 iPrintState = 3;
  if (this->iprintstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iprintstate());
  }

  // uint32 iMachineStatus = 4;
  if (this->imachinestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_imachinestatus());
  }

  // uint32 getstatus = 5;
  if (this->getstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_getstatus());
  }

  // uint32 materialId = 6;
  if (this->materialid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_materialid());
  }

  // uint32 motionId = 7;
  if (this->motionid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_motionid());
  }

  // uint32 iManualMV = 8;
  if (this->imanualmv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_imanualmv());
  }

  // uint32 iMatPat = 9;
  if (this->imatpat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_imatpat());
  }

  // uint32 iLicenseStatus = 10;
  if (this->ilicensestatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilicensestatus());
  }

  // uint32 iRenewLicense = 11;
  if (this->irenewlicense() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_irenewlicense());
  }

  // float fMaterialLevelmm = 18;
  if (!(this->fmateriallevelmm() <= 0 && this->fmateriallevelmm() >= 0)) {
    total_size += 2 + 4;
  }

  // float fFillVacuumSec = 19;
  if (!(this->ffillvacuumsec() <= 0 && this->ffillvacuumsec() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 packetCode = 20;
  if (this->packetcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packetcode());
  }

  // uint32 jobId = 23;
  if (this->jobid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_jobid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetServerCommands::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network_messages.NetServerCommands)
  GOOGLE_DCHECK_NE(&from, this);
  const NetServerCommands* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetServerCommands>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network_messages.NetServerCommands)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network_messages.NetServerCommands)
    MergeFrom(*source);
  }
}

void NetServerCommands::MergeFrom(const NetServerCommands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network_messages.NetServerCommands)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  irequestedcode_.MergeFrom(from.irequestedcode_);
  ilicensekey_.MergeFrom(from.ilicensekey_);
  if (from.has_machineconf()) {
    _internal_mutable_machineconf()->::network_messages::MachineConfig::MergeFrom(from._internal_machineconf());
  }
  if (from.has_materialconfig()) {
    _internal_mutable_materialconfig()->::network_messages::MaterialConfig::MergeFrom(from._internal_materialconfig());
  }
  if (from.has_motionconfig()) {
    _internal_mutable_motionconfig()->::network_messages::MotionConfig::MergeFrom(from._internal_motionconfig());
  }
  if (from.has_job3d()) {
    _internal_mutable_job3d()->::network_messages::Job3D::MergeFrom(from._internal_job3d());
  }
  if (from.icalibrstate() != 0) {
    _internal_set_icalibrstate(from._internal_icalibrstate());
  }
  if (from.igopos() != 0) {
    _internal_set_igopos(from._internal_igopos());
  }
  if (from.iprintstate() != 0) {
    _internal_set_iprintstate(from._internal_iprintstate());
  }
  if (from.imachinestatus() != 0) {
    _internal_set_imachinestatus(from._internal_imachinestatus());
  }
  if (from.getstatus() != 0) {
    _internal_set_getstatus(from._internal_getstatus());
  }
  if (from.materialid() != 0) {
    _internal_set_materialid(from._internal_materialid());
  }
  if (from.motionid() != 0) {
    _internal_set_motionid(from._internal_motionid());
  }
  if (from.imanualmv() != 0) {
    _internal_set_imanualmv(from._internal_imanualmv());
  }
  if (from.imatpat() != 0) {
    _internal_set_imatpat(from._internal_imatpat());
  }
  if (from.ilicensestatus() != 0) {
    _internal_set_ilicensestatus(from._internal_ilicensestatus());
  }
  if (from.irenewlicense() != 0) {
    _internal_set_irenewlicense(from._internal_irenewlicense());
  }
  if (!(from.fmateriallevelmm() <= 0 && from.fmateriallevelmm() >= 0)) {
    _internal_set_fmateriallevelmm(from._internal_fmateriallevelmm());
  }
  if (!(from.ffillvacuumsec() <= 0 && from.ffillvacuumsec() >= 0)) {
    _internal_set_ffillvacuumsec(from._internal_ffillvacuumsec());
  }
  if (from.packetcode() != 0) {
    _internal_set_packetcode(from._internal_packetcode());
  }
  if (from.jobid() != 0) {
    _internal_set_jobid(from._internal_jobid());
  }
}

void NetServerCommands::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network_messages.NetServerCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetServerCommands::CopyFrom(const NetServerCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network_messages.NetServerCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetServerCommands::IsInitialized() const {
  return true;
}

void NetServerCommands::InternalSwap(NetServerCommands* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  irequestedcode_.InternalSwap(&other->irequestedcode_);
  ilicensekey_.InternalSwap(&other->ilicensekey_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetServerCommands, jobid_)
      + sizeof(NetServerCommands::jobid_)
      - PROTOBUF_FIELD_OFFSET(NetServerCommands, machineconf_)>(
          reinterpret_cast<char*>(&machineconf_),
          reinterpret_cast<char*>(&other->machineconf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetServerCommands::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetClientRes::_Internal {
 public:
};

NetClientRes::NetClientRes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  confs_(arena),
  materials_(arena),
  motions_(arena),
  jobs_(arena),
  filebytes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network_messages.NetClientRes)
}
NetClientRes::NetClientRes(const NetClientRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      confs_(from.confs_),
      materials_(from.materials_),
      motions_(from.motions_),
      jobs_(from.jobs_),
      filebytes_(from.filebytes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errormesg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormesg().empty()) {
    errormesg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_errormesg(), 
      GetArena());
  }
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_md5().empty()) {
    md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_md5(), 
      GetArena());
  }
  ::memcpy(&packetcode_, &from.packetcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensorval_) -
    reinterpret_cast<char*>(&packetcode_)) + sizeof(sensorval_));
  // @@protoc_insertion_point(copy_constructor:network_messages.NetClientRes)
}

void NetClientRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetClientRes_message_2eproto.base);
  errormesg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&packetcode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&sensorval_) -
      reinterpret_cast<char*>(&packetcode_)) + sizeof(sensorval_));
}

NetClientRes::~NetClientRes() {
  // @@protoc_insertion_point(destructor:network_messages.NetClientRes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetClientRes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errormesg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetClientRes::ArenaDtor(void* object) {
  NetClientRes* _this = reinterpret_cast< NetClientRes* >(object);
  (void)_this;
}
void NetClientRes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetClientRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetClientRes& NetClientRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetClientRes_message_2eproto.base);
  return *internal_default_instance();
}


void NetClientRes::Clear() {
// @@protoc_insertion_point(message_clear_start:network_messages.NetClientRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  confs_.Clear();
  materials_.Clear();
  motions_.Clear();
  jobs_.Clear();
  filebytes_.Clear();
  errormesg_.ClearToEmpty();
  md5_.ClearToEmpty();
  ::memset(&packetcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensorval_) -
      reinterpret_cast<char*>(&packetcode_)) + sizeof(sensorval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetClientRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 packetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .network_messages.MachineConfig confs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_confs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .network_messages.MaterialConfig materials = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_materials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .network_messages.MotionConfig motions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_motions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .network_messages.Job3D jobs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string errorMesg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_errormesg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "network_messages.NetClientRes.errorMesg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 progress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 currentSlice = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          currentslice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalSlice = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          totalslice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes fileBytes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filebytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 remaining_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float sensorVal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          sensorval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes Md5 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_md5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetClientRes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network_messages.NetClientRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packetcode(), target);
  }

  // repeated .network_messages.MachineConfig confs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_confs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_confs(i), target, stream);
  }

  // repeated .network_messages.MaterialConfig materials = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_materials_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_materials(i), target, stream);
  }

  // repeated .network_messages.MotionConfig motions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_motions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_motions(i), target, stream);
  }

  // repeated .network_messages.Job3D jobs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_jobs(i), target, stream);
  }

  // string errorMesg = 6;
  if (this->errormesg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormesg().data(), static_cast<int>(this->_internal_errormesg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network_messages.NetClientRes.errorMesg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_errormesg(), target);
  }

  // uint32 progress = 7;
  if (this->progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_progress(), target);
  }

  // uint64 size = 8;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_size(), target);
  }

  // uint32 currentSlice = 9;
  if (this->currentslice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_currentslice(), target);
  }

  // uint32 totalSlice = 10;
  if (this->totalslice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_totalslice(), target);
  }

  // repeated bytes fileBytes = 11;
  for (int i = 0, n = this->_internal_filebytes_size(); i < n; i++) {
    const auto& s = this->_internal_filebytes(i);
    target = stream->WriteBytes(11, s, target);
  }

  // uint64 remaining_time = 12;
  if (this->remaining_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_remaining_time(), target);
  }

  // float sensorVal = 13;
  if (!(this->sensorval() <= 0 && this->sensorval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_sensorval(), target);
  }

  // bytes Md5 = 14;
  if (this->md5().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network_messages.NetClientRes)
  return target;
}

size_t NetClientRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network_messages.NetClientRes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network_messages.MachineConfig confs = 2;
  total_size += 1UL * this->_internal_confs_size();
  for (const auto& msg : this->confs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network_messages.MaterialConfig materials = 3;
  total_size += 1UL * this->_internal_materials_size();
  for (const auto& msg : this->materials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network_messages.MotionConfig motions = 4;
  total_size += 1UL * this->_internal_motions_size();
  for (const auto& msg : this->motions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .network_messages.Job3D jobs = 5;
  total_size += 1UL * this->_internal_jobs_size();
  for (const auto& msg : this->jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes fileBytes = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filebytes_.size());
  for (int i = 0, n = filebytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      filebytes_.Get(i));
  }

  // string errorMesg = 6;
  if (this->errormesg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormesg());
  }

  // bytes Md5 = 14;
  if (this->md5().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_md5());
  }

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packetcode());
  }

  // uint32 progress = 7;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_progress());
  }

  // uint64 size = 8;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // uint32 currentSlice = 9;
  if (this->currentslice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_currentslice());
  }

  // uint32 totalSlice = 10;
  if (this->totalslice() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalslice());
  }

  // uint64 remaining_time = 12;
  if (this->remaining_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remaining_time());
  }

  // float sensorVal = 13;
  if (!(this->sensorval() <= 0 && this->sensorval() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetClientRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network_messages.NetClientRes)
  GOOGLE_DCHECK_NE(&from, this);
  const NetClientRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetClientRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network_messages.NetClientRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network_messages.NetClientRes)
    MergeFrom(*source);
  }
}

void NetClientRes::MergeFrom(const NetClientRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network_messages.NetClientRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  confs_.MergeFrom(from.confs_);
  materials_.MergeFrom(from.materials_);
  motions_.MergeFrom(from.motions_);
  jobs_.MergeFrom(from.jobs_);
  filebytes_.MergeFrom(from.filebytes_);
  if (from.errormesg().size() > 0) {
    _internal_set_errormesg(from._internal_errormesg());
  }
  if (from.md5().size() > 0) {
    _internal_set_md5(from._internal_md5());
  }
  if (from.packetcode() != 0) {
    _internal_set_packetcode(from._internal_packetcode());
  }
  if (from.progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.currentslice() != 0) {
    _internal_set_currentslice(from._internal_currentslice());
  }
  if (from.totalslice() != 0) {
    _internal_set_totalslice(from._internal_totalslice());
  }
  if (from.remaining_time() != 0) {
    _internal_set_remaining_time(from._internal_remaining_time());
  }
  if (!(from.sensorval() <= 0 && from.sensorval() >= 0)) {
    _internal_set_sensorval(from._internal_sensorval());
  }
}

void NetClientRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network_messages.NetClientRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetClientRes::CopyFrom(const NetClientRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network_messages.NetClientRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetClientRes::IsInitialized() const {
  return true;
}

void NetClientRes::InternalSwap(NetClientRes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  confs_.InternalSwap(&other->confs_);
  materials_.InternalSwap(&other->materials_);
  motions_.InternalSwap(&other->motions_);
  jobs_.InternalSwap(&other->jobs_);
  filebytes_.InternalSwap(&other->filebytes_);
  errormesg_.Swap(&other->errormesg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  md5_.Swap(&other->md5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetClientRes, sensorval_)
      + sizeof(NetClientRes::sensorval_)
      - PROTOBUF_FIELD_OFFSET(NetClientRes, packetcode_)>(
          reinterpret_cast<char*>(&packetcode_),
          reinterpret_cast<char*>(&other->packetcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetClientRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrintProgress::_Internal {
 public:
};

PrintProgress::PrintProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network_messages.PrintProgress)
}
PrintProgress::PrintProgress(const PrintProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network_messages.PrintProgress)
}

void PrintProgress::SharedCtor() {
}

PrintProgress::~PrintProgress() {
  // @@protoc_insertion_point(destructor:network_messages.PrintProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrintProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrintProgress::ArenaDtor(void* object) {
  PrintProgress* _this = reinterpret_cast< PrintProgress* >(object);
  (void)_this;
}
void PrintProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrintProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrintProgress& PrintProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrintProgress_message_2eproto.base);
  return *internal_default_instance();
}


void PrintProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:network_messages.PrintProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrintProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrintProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network_messages.PrintProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network_messages.PrintProgress)
  return target;
}

size_t PrintProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network_messages.PrintProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrintProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network_messages.PrintProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const PrintProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrintProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network_messages.PrintProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network_messages.PrintProgress)
    MergeFrom(*source);
  }
}

void PrintProgress::MergeFrom(const PrintProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network_messages.PrintProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PrintProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network_messages.PrintProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintProgress::CopyFrom(const PrintProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network_messages.PrintProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintProgress::IsInitialized() const {
  return true;
}

void PrintProgress::InternalSwap(PrintProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrintProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MachineConfig::_Internal {
 public:
};

MachineConfig::MachineConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network_messages.MachineConfig)
}
MachineConfig::MachineConfig(const MachineConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  machineno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_machineno().empty()) {
    machineno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machineno(), 
      GetArena());
  }
  ::memcpy(&packetcode_, &from.packetcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&minintensitysensor_) -
    reinterpret_cast<char*>(&packetcode_)) + sizeof(minintensitysensor_));
  // @@protoc_insertion_point(copy_constructor:network_messages.MachineConfig)
}

void MachineConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MachineConfig_message_2eproto.base);
  machineno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&packetcode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&minintensitysensor_) -
      reinterpret_cast<char*>(&packetcode_)) + sizeof(minintensitysensor_));
}

MachineConfig::~MachineConfig() {
  // @@protoc_insertion_point(destructor:network_messages.MachineConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MachineConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  machineno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MachineConfig::ArenaDtor(void* object) {
  MachineConfig* _this = reinterpret_cast< MachineConfig* >(object);
  (void)_this;
}
void MachineConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MachineConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MachineConfig& MachineConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MachineConfig_message_2eproto.base);
  return *internal_default_instance();
}


void MachineConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network_messages.MachineConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  machineno_.ClearToEmpty();
  ::memset(&packetcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minintensitysensor_) -
      reinterpret_cast<char*>(&packetcode_)) + sizeof(minintensitysensor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachineConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 packetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ModelCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modelcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string MachineNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_machineno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "network_messages.MachineConfig.MachineNo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SubVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          subversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool NeedLicense = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          needlicense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float PrinterUnit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          printerunit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 ZUpperLimit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          zupperlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ProjectorProtocol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          projectorprotocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 NoOfMaskPoints = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          noofmaskpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MaxIntensity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          maxintensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MinIntensity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          minintensity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HasDoor = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          hasdoor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HasErm = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          haserm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gProjectWidth = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          gprojectwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gProjectHeight = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          gprojectheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool BUpTDownConfig = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          buptdownconfig_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rowId = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          rowid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HasPlunger = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          hasplunger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TDownZHomePos = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          tdownzhomepos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float vacuumTimer = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          vacuumtimer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float SensorSetPointVacuum = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          sensorsetpointvacuum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float SensorSetPoint = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          sensorsetpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float SensorThreshold = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          sensorthreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float XShift = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          xshift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float YShift = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          yshift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 MaxIntensitySensor = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          maxintensitysensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MinIntensitySensor = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          minintensitysensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MachineConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network_messages.MachineConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packetcode(), target);
  }

  // uint32 ModelCode = 2;
  if (this->modelcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_modelcode(), target);
  }

  // string MachineNo = 3;
  if (this->machineno().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machineno().data(), static_cast<int>(this->_internal_machineno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network_messages.MachineConfig.MachineNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_machineno(), target);
  }

  // uint32 Version = 4;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // uint32 SubVersion = 5;
  if (this->subversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_subversion(), target);
  }

  // bool NeedLicense = 6;
  if (this->needlicense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_needlicense(), target);
  }

  // float PrinterUnit = 7;
  if (!(this->printerunit() <= 0 && this->printerunit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_printerunit(), target);
  }

  // uint32 ZUpperLimit = 8;
  if (this->zupperlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_zupperlimit(), target);
  }

  // uint32 ProjectorProtocol = 9;
  if (this->projectorprotocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_projectorprotocol(), target);
  }

  // uint32 NoOfMaskPoints = 10;
  if (this->noofmaskpoints() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_noofmaskpoints(), target);
  }

  // uint32 MaxIntensity = 11;
  if (this->maxintensity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_maxintensity(), target);
  }

  // uint32 MinIntensity = 12;
  if (this->minintensity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_minintensity(), target);
  }

  // bool HasDoor = 13;
  if (this->hasdoor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_hasdoor(), target);
  }

  // bool HasErm = 14;
  if (this->haserm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_haserm(), target);
  }

  // uint32 gProjectWidth = 15;
  if (this->gprojectwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_gprojectwidth(), target);
  }

  // uint32 gProjectHeight = 16;
  if (this->gprojectheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_gprojectheight(), target);
  }

  // bool BUpTDownConfig = 17;
  if (this->buptdownconfig() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_buptdownconfig(), target);
  }

  // uint32 rowId = 18;
  if (this->rowid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_rowid(), target);
  }

  // bool HasPlunger = 19;
  if (this->hasplunger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_hasplunger(), target);
  }

  // uint32 TDownZHomePos = 20;
  if (this->tdownzhomepos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_tdownzhomepos(), target);
  }

  // float vacuumTimer = 21;
  if (!(this->vacuumtimer() <= 0 && this->vacuumtimer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_vacuumtimer(), target);
  }

  // float SensorSetPointVacuum = 22;
  if (!(this->sensorsetpointvacuum() <= 0 && this->sensorsetpointvacuum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_sensorsetpointvacuum(), target);
  }

  // float SensorSetPoint = 23;
  if (!(this->sensorsetpoint() <= 0 && this->sensorsetpoint() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_sensorsetpoint(), target);
  }

  // float SensorThreshold = 24;
  if (!(this->sensorthreshold() <= 0 && this->sensorthreshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_sensorthreshold(), target);
  }

  // float XShift = 25;
  if (!(this->xshift() <= 0 && this->xshift() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_xshift(), target);
  }

  // float YShift = 26;
  if (!(this->yshift() <= 0 && this->yshift() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_yshift(), target);
  }

  // uint32 MaxIntensitySensor = 27;
  if (this->maxintensitysensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_maxintensitysensor(), target);
  }

  // uint32 MinIntensitySensor = 28;
  if (this->minintensitysensor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_minintensitysensor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network_messages.MachineConfig)
  return target;
}

size_t MachineConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network_messages.MachineConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string MachineNo = 3;
  if (this->machineno().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machineno());
  }

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packetcode());
  }

  // uint32 ModelCode = 2;
  if (this->modelcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_modelcode());
  }

  // uint32 Version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // uint32 SubVersion = 5;
  if (this->subversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_subversion());
  }

  // float PrinterUnit = 7;
  if (!(this->printerunit() <= 0 && this->printerunit() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 ZUpperLimit = 8;
  if (this->zupperlimit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_zupperlimit());
  }

  // uint32 ProjectorProtocol = 9;
  if (this->projectorprotocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_projectorprotocol());
  }

  // uint32 NoOfMaskPoints = 10;
  if (this->noofmaskpoints() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_noofmaskpoints());
  }

  // uint32 MaxIntensity = 11;
  if (this->maxintensity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxintensity());
  }

  // uint32 MinIntensity = 12;
  if (this->minintensity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minintensity());
  }

  // bool NeedLicense = 6;
  if (this->needlicense() != 0) {
    total_size += 1 + 1;
  }

  // bool HasDoor = 13;
  if (this->hasdoor() != 0) {
    total_size += 1 + 1;
  }

  // bool HasErm = 14;
  if (this->haserm() != 0) {
    total_size += 1 + 1;
  }

  // bool BUpTDownConfig = 17;
  if (this->buptdownconfig() != 0) {
    total_size += 2 + 1;
  }

  // uint32 gProjectWidth = 15;
  if (this->gprojectwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gprojectwidth());
  }

  // uint32 gProjectHeight = 16;
  if (this->gprojectheight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gprojectheight());
  }

  // uint32 rowId = 18;
  if (this->rowid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rowid());
  }

  // bool HasPlunger = 19;
  if (this->hasplunger() != 0) {
    total_size += 2 + 1;
  }

  // uint32 TDownZHomePos = 20;
  if (this->tdownzhomepos() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tdownzhomepos());
  }

  // float vacuumTimer = 21;
  if (!(this->vacuumtimer() <= 0 && this->vacuumtimer() >= 0)) {
    total_size += 2 + 4;
  }

  // float SensorSetPointVacuum = 22;
  if (!(this->sensorsetpointvacuum() <= 0 && this->sensorsetpointvacuum() >= 0)) {
    total_size += 2 + 4;
  }

  // float SensorSetPoint = 23;
  if (!(this->sensorsetpoint() <= 0 && this->sensorsetpoint() >= 0)) {
    total_size += 2 + 4;
  }

  // float SensorThreshold = 24;
  if (!(this->sensorthreshold() <= 0 && this->sensorthreshold() >= 0)) {
    total_size += 2 + 4;
  }

  // float XShift = 25;
  if (!(this->xshift() <= 0 && this->xshift() >= 0)) {
    total_size += 2 + 4;
  }

  // float YShift = 26;
  if (!(this->yshift() <= 0 && this->yshift() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 MaxIntensitySensor = 27;
  if (this->maxintensitysensor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxintensitysensor());
  }

  // uint32 MinIntensitySensor = 28;
  if (this->minintensitysensor() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minintensitysensor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MachineConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network_messages.MachineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MachineConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network_messages.MachineConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network_messages.MachineConfig)
    MergeFrom(*source);
  }
}

void MachineConfig::MergeFrom(const MachineConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network_messages.MachineConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.machineno().size() > 0) {
    _internal_set_machineno(from._internal_machineno());
  }
  if (from.packetcode() != 0) {
    _internal_set_packetcode(from._internal_packetcode());
  }
  if (from.modelcode() != 0) {
    _internal_set_modelcode(from._internal_modelcode());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.subversion() != 0) {
    _internal_set_subversion(from._internal_subversion());
  }
  if (!(from.printerunit() <= 0 && from.printerunit() >= 0)) {
    _internal_set_printerunit(from._internal_printerunit());
  }
  if (from.zupperlimit() != 0) {
    _internal_set_zupperlimit(from._internal_zupperlimit());
  }
  if (from.projectorprotocol() != 0) {
    _internal_set_projectorprotocol(from._internal_projectorprotocol());
  }
  if (from.noofmaskpoints() != 0) {
    _internal_set_noofmaskpoints(from._internal_noofmaskpoints());
  }
  if (from.maxintensity() != 0) {
    _internal_set_maxintensity(from._internal_maxintensity());
  }
  if (from.minintensity() != 0) {
    _internal_set_minintensity(from._internal_minintensity());
  }
  if (from.needlicense() != 0) {
    _internal_set_needlicense(from._internal_needlicense());
  }
  if (from.hasdoor() != 0) {
    _internal_set_hasdoor(from._internal_hasdoor());
  }
  if (from.haserm() != 0) {
    _internal_set_haserm(from._internal_haserm());
  }
  if (from.buptdownconfig() != 0) {
    _internal_set_buptdownconfig(from._internal_buptdownconfig());
  }
  if (from.gprojectwidth() != 0) {
    _internal_set_gprojectwidth(from._internal_gprojectwidth());
  }
  if (from.gprojectheight() != 0) {
    _internal_set_gprojectheight(from._internal_gprojectheight());
  }
  if (from.rowid() != 0) {
    _internal_set_rowid(from._internal_rowid());
  }
  if (from.hasplunger() != 0) {
    _internal_set_hasplunger(from._internal_hasplunger());
  }
  if (from.tdownzhomepos() != 0) {
    _internal_set_tdownzhomepos(from._internal_tdownzhomepos());
  }
  if (!(from.vacuumtimer() <= 0 && from.vacuumtimer() >= 0)) {
    _internal_set_vacuumtimer(from._internal_vacuumtimer());
  }
  if (!(from.sensorsetpointvacuum() <= 0 && from.sensorsetpointvacuum() >= 0)) {
    _internal_set_sensorsetpointvacuum(from._internal_sensorsetpointvacuum());
  }
  if (!(from.sensorsetpoint() <= 0 && from.sensorsetpoint() >= 0)) {
    _internal_set_sensorsetpoint(from._internal_sensorsetpoint());
  }
  if (!(from.sensorthreshold() <= 0 && from.sensorthreshold() >= 0)) {
    _internal_set_sensorthreshold(from._internal_sensorthreshold());
  }
  if (!(from.xshift() <= 0 && from.xshift() >= 0)) {
    _internal_set_xshift(from._internal_xshift());
  }
  if (!(from.yshift() <= 0 && from.yshift() >= 0)) {
    _internal_set_yshift(from._internal_yshift());
  }
  if (from.maxintensitysensor() != 0) {
    _internal_set_maxintensitysensor(from._internal_maxintensitysensor());
  }
  if (from.minintensitysensor() != 0) {
    _internal_set_minintensitysensor(from._internal_minintensitysensor());
  }
}

void MachineConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network_messages.MachineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineConfig::CopyFrom(const MachineConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network_messages.MachineConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineConfig::IsInitialized() const {
  return true;
}

void MachineConfig::InternalSwap(MachineConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  machineno_.Swap(&other->machineno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MachineConfig, minintensitysensor_)
      + sizeof(MachineConfig::minintensitysensor_)
      - PROTOBUF_FIELD_OFFSET(MachineConfig, packetcode_)>(
          reinterpret_cast<char*>(&packetcode_),
          reinterpret_cast<char*>(&other->packetcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MachineConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MaterialConfig::_Internal {
 public:
};

MaterialConfig::MaterialConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network_messages.MaterialConfig)
}
MaterialConfig::MaterialConfig(const MaterialConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&packetcode_, &from.packetcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&rowid_) -
    reinterpret_cast<char*>(&packetcode_)) + sizeof(rowid_));
  // @@protoc_insertion_point(copy_constructor:network_messages.MaterialConfig)
}

void MaterialConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MaterialConfig_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&packetcode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rowid_) -
      reinterpret_cast<char*>(&packetcode_)) + sizeof(rowid_));
}

MaterialConfig::~MaterialConfig() {
  // @@protoc_insertion_point(destructor:network_messages.MaterialConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MaterialConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MaterialConfig::ArenaDtor(void* object) {
  MaterialConfig* _this = reinterpret_cast< MaterialConfig* >(object);
  (void)_this;
}
void MaterialConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaterialConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaterialConfig& MaterialConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaterialConfig_message_2eproto.base);
  return *internal_default_instance();
}


void MaterialConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network_messages.MaterialConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&packetcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rowid_) -
      reinterpret_cast<char*>(&packetcode_)) + sizeof(rowid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaterialConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 packetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "network_messages.MaterialConfig.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 LayerThickness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          layerthickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BurnInLayers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          burninlayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float BurnInCureTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          burnincuretime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float NormalCureTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          normalcuretime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float BurnIntensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          burnintensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float Intensity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 rowId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rowid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaterialConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network_messages.MaterialConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packetcode(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network_messages.MaterialConfig.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 LayerThickness = 3;
  if (this->layerthickness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_layerthickness(), target);
  }

  // uint32 BurnInLayers = 4;
  if (this->burninlayers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_burninlayers(), target);
  }

  // float BurnInCureTime = 5;
  if (!(this->burnincuretime() <= 0 && this->burnincuretime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_burnincuretime(), target);
  }

  // float NormalCureTime = 6;
  if (!(this->normalcuretime() <= 0 && this->normalcuretime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_normalcuretime(), target);
  }

  // float BurnIntensity = 7;
  if (!(this->burnintensity() <= 0 && this->burnintensity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_burnintensity(), target);
  }

  // float Intensity = 8;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_intensity(), target);
  }

  // uint32 rowId = 9;
  if (this->rowid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_rowid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network_messages.MaterialConfig)
  return target;
}

size_t MaterialConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network_messages.MaterialConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packetcode());
  }

  // uint32 LayerThickness = 3;
  if (this->layerthickness() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_layerthickness());
  }

  // uint32 BurnInLayers = 4;
  if (this->burninlayers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_burninlayers());
  }

  // float BurnInCureTime = 5;
  if (!(this->burnincuretime() <= 0 && this->burnincuretime() >= 0)) {
    total_size += 1 + 4;
  }

  // float NormalCureTime = 6;
  if (!(this->normalcuretime() <= 0 && this->normalcuretime() >= 0)) {
    total_size += 1 + 4;
  }

  // float BurnIntensity = 7;
  if (!(this->burnintensity() <= 0 && this->burnintensity() >= 0)) {
    total_size += 1 + 4;
  }

  // float Intensity = 8;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 rowId = 9;
  if (this->rowid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rowid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaterialConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network_messages.MaterialConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MaterialConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaterialConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network_messages.MaterialConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network_messages.MaterialConfig)
    MergeFrom(*source);
  }
}

void MaterialConfig::MergeFrom(const MaterialConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network_messages.MaterialConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.packetcode() != 0) {
    _internal_set_packetcode(from._internal_packetcode());
  }
  if (from.layerthickness() != 0) {
    _internal_set_layerthickness(from._internal_layerthickness());
  }
  if (from.burninlayers() != 0) {
    _internal_set_burninlayers(from._internal_burninlayers());
  }
  if (!(from.burnincuretime() <= 0 && from.burnincuretime() >= 0)) {
    _internal_set_burnincuretime(from._internal_burnincuretime());
  }
  if (!(from.normalcuretime() <= 0 && from.normalcuretime() >= 0)) {
    _internal_set_normalcuretime(from._internal_normalcuretime());
  }
  if (!(from.burnintensity() <= 0 && from.burnintensity() >= 0)) {
    _internal_set_burnintensity(from._internal_burnintensity());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    _internal_set_intensity(from._internal_intensity());
  }
  if (from.rowid() != 0) {
    _internal_set_rowid(from._internal_rowid());
  }
}

void MaterialConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network_messages.MaterialConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialConfig::CopyFrom(const MaterialConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network_messages.MaterialConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialConfig::IsInitialized() const {
  return true;
}

void MaterialConfig::InternalSwap(MaterialConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaterialConfig, rowid_)
      + sizeof(MaterialConfig::rowid_)
      - PROTOBUF_FIELD_OFFSET(MaterialConfig, packetcode_)>(
          reinterpret_cast<char*>(&packetcode_),
          reinterpret_cast<char*>(&other->packetcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaterialConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MotionConfig::_Internal {
 public:
};

MotionConfig::MotionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  layer_z_raise_(arena),
  layer_z_lower_(arena),
  layer_tilt_raise_(arena),
  layer_tilt_lower_(arena),
  layer_overlift_(arena),
  layer_breathe_(arena),
  layer_settle_(arena),
  layer_tilt_percent_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network_messages.MotionConfig)
}
MotionConfig::MotionConfig(const MotionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      layer_z_raise_(from.layer_z_raise_),
      layer_z_lower_(from.layer_z_lower_),
      layer_tilt_raise_(from.layer_tilt_raise_),
      layer_tilt_lower_(from.layer_tilt_lower_),
      layer_overlift_(from.layer_overlift_),
      layer_breathe_(from.layer_breathe_),
      layer_settle_(from.layer_settle_),
      layer_tilt_percent_(from.layer_tilt_percent_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&packetcode_, &from.packetcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&rowid_) -
    reinterpret_cast<char*>(&packetcode_)) + sizeof(rowid_));
  // @@protoc_insertion_point(copy_constructor:network_messages.MotionConfig)
}

void MotionConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotionConfig_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&packetcode_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rowid_) -
      reinterpret_cast<char*>(&packetcode_)) + sizeof(rowid_));
}

MotionConfig::~MotionConfig() {
  // @@protoc_insertion_point(destructor:network_messages.MotionConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MotionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MotionConfig::ArenaDtor(void* object) {
  MotionConfig* _this = reinterpret_cast< MotionConfig* >(object);
  (void)_this;
}
void MotionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MotionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionConfig& MotionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionConfig_message_2eproto.base);
  return *internal_default_instance();
}


void MotionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network_messages.MotionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_z_raise_.Clear();
  layer_z_lower_.Clear();
  layer_tilt_raise_.Clear();
  layer_tilt_lower_.Clear();
  layer_overlift_.Clear();
  layer_breathe_.Clear();
  layer_settle_.Clear();
  layer_tilt_percent_.Clear();
  name_.ClearToEmpty();
  ::memset(&packetcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rowid_) -
      reinterpret_cast<char*>(&packetcode_)) + sizeof(rowid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 packetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "network_messages.MotionConfig.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Layer_Z_Raise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_layer_z_raise(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_layer_z_raise(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Layer_Z_Lower = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_layer_z_lower(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_layer_z_lower(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Layer_Tilt_Raise = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_layer_tilt_raise(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_layer_tilt_raise(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Layer_Tilt_Lower = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_layer_tilt_lower(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_layer_tilt_lower(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Layer_Overlift = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_layer_overlift(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_layer_overlift(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Layer_Breathe = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_layer_breathe(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_layer_breathe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Layer_Settle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_layer_settle(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_layer_settle(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Layer_Tilt_Percent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_layer_tilt_percent(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_layer_tilt_percent(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Cut_Off_Layers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cut_off_layers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Final_OverLift = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          final_overlift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Base_Layer_settle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          base_layer_settle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rowId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          rowid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network_messages.MotionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packetcode(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network_messages.MotionConfig.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated uint32 Layer_Z_Raise = 3;
  {
    int byte_size = _layer_z_raise_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_layer_z_raise(), byte_size, target);
    }
  }

  // repeated uint32 Layer_Z_Lower = 4;
  {
    int byte_size = _layer_z_lower_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_layer_z_lower(), byte_size, target);
    }
  }

  // repeated uint32 Layer_Tilt_Raise = 5;
  {
    int byte_size = _layer_tilt_raise_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_layer_tilt_raise(), byte_size, target);
    }
  }

  // repeated uint32 Layer_Tilt_Lower = 6;
  {
    int byte_size = _layer_tilt_lower_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_layer_tilt_lower(), byte_size, target);
    }
  }

  // repeated uint32 Layer_Overlift = 7;
  {
    int byte_size = _layer_overlift_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_layer_overlift(), byte_size, target);
    }
  }

  // repeated uint32 Layer_Breathe = 8;
  {
    int byte_size = _layer_breathe_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_layer_breathe(), byte_size, target);
    }
  }

  // repeated uint32 Layer_Settle = 9;
  {
    int byte_size = _layer_settle_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_layer_settle(), byte_size, target);
    }
  }

  // repeated uint32 Layer_Tilt_Percent = 10;
  {
    int byte_size = _layer_tilt_percent_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_layer_tilt_percent(), byte_size, target);
    }
  }

  // uint32 Cut_Off_Layers = 11;
  if (this->cut_off_layers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cut_off_layers(), target);
  }

  // uint32 Final_OverLift = 12;
  if (this->final_overlift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_final_overlift(), target);
  }

  // uint32 Base_Layer_settle = 13;
  if (this->base_layer_settle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_base_layer_settle(), target);
  }

  // uint32 rowId = 14;
  if (this->rowid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rowid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network_messages.MotionConfig)
  return target;
}

size_t MotionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network_messages.MotionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Layer_Z_Raise = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_z_raise_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_z_raise_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Layer_Z_Lower = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_z_lower_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_z_lower_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Layer_Tilt_Raise = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_tilt_raise_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_tilt_raise_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Layer_Tilt_Lower = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_tilt_lower_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_tilt_lower_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Layer_Overlift = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_overlift_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_overlift_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Layer_Breathe = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_breathe_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_breathe_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Layer_Settle = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_settle_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_settle_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Layer_Tilt_Percent = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->layer_tilt_percent_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _layer_tilt_percent_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packetcode());
  }

  // uint32 Cut_Off_Layers = 11;
  if (this->cut_off_layers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cut_off_layers());
  }

  // uint32 Final_OverLift = 12;
  if (this->final_overlift() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_final_overlift());
  }

  // uint32 Base_Layer_settle = 13;
  if (this->base_layer_settle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_layer_settle());
  }

  // uint32 rowId = 14;
  if (this->rowid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rowid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network_messages.MotionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network_messages.MotionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network_messages.MotionConfig)
    MergeFrom(*source);
  }
}

void MotionConfig::MergeFrom(const MotionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network_messages.MotionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_z_raise_.MergeFrom(from.layer_z_raise_);
  layer_z_lower_.MergeFrom(from.layer_z_lower_);
  layer_tilt_raise_.MergeFrom(from.layer_tilt_raise_);
  layer_tilt_lower_.MergeFrom(from.layer_tilt_lower_);
  layer_overlift_.MergeFrom(from.layer_overlift_);
  layer_breathe_.MergeFrom(from.layer_breathe_);
  layer_settle_.MergeFrom(from.layer_settle_);
  layer_tilt_percent_.MergeFrom(from.layer_tilt_percent_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.packetcode() != 0) {
    _internal_set_packetcode(from._internal_packetcode());
  }
  if (from.cut_off_layers() != 0) {
    _internal_set_cut_off_layers(from._internal_cut_off_layers());
  }
  if (from.final_overlift() != 0) {
    _internal_set_final_overlift(from._internal_final_overlift());
  }
  if (from.base_layer_settle() != 0) {
    _internal_set_base_layer_settle(from._internal_base_layer_settle());
  }
  if (from.rowid() != 0) {
    _internal_set_rowid(from._internal_rowid());
  }
}

void MotionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network_messages.MotionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionConfig::CopyFrom(const MotionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network_messages.MotionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionConfig::IsInitialized() const {
  return true;
}

void MotionConfig::InternalSwap(MotionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  layer_z_raise_.InternalSwap(&other->layer_z_raise_);
  layer_z_lower_.InternalSwap(&other->layer_z_lower_);
  layer_tilt_raise_.InternalSwap(&other->layer_tilt_raise_);
  layer_tilt_lower_.InternalSwap(&other->layer_tilt_lower_);
  layer_overlift_.InternalSwap(&other->layer_overlift_);
  layer_breathe_.InternalSwap(&other->layer_breathe_);
  layer_settle_.InternalSwap(&other->layer_settle_);
  layer_tilt_percent_.InternalSwap(&other->layer_tilt_percent_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionConfig, rowid_)
      + sizeof(MotionConfig::rowid_)
      - PROTOBUF_FIELD_OFFSET(MotionConfig, packetcode_)>(
          reinterpret_cast<char*>(&packetcode_),
          reinterpret_cast<char*>(&other->packetcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Job3D::_Internal {
 public:
};

Job3D::Job3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filebytes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:network_messages.Job3D)
}
Job3D::Job3D(const Job3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filebytes_(from.filebytes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&rowid_) -
    reinterpret_cast<char*>(&size_)) + sizeof(rowid_));
  // @@protoc_insertion_point(copy_constructor:network_messages.Job3D)
}

void Job3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Job3D_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rowid_) -
      reinterpret_cast<char*>(&size_)) + sizeof(rowid_));
}

Job3D::~Job3D() {
  // @@protoc_insertion_point(destructor:network_messages.Job3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Job3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Job3D::ArenaDtor(void* object) {
  Job3D* _this = reinterpret_cast< Job3D* >(object);
  (void)_this;
}
void Job3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Job3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Job3D& Job3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Job3D_message_2eproto.base);
  return *internal_default_instance();
}


void Job3D::Clear() {
// @@protoc_insertion_point(message_clear_start:network_messages.Job3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filebytes_.Clear();
  name_.ClearToEmpty();
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rowid_) -
      reinterpret_cast<char*>(&size_)) + sizeof(rowid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Job3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 packetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "network_messages.Job3D.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lastPacket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lastpacket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes fileBytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filebytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 rowId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rowid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Md5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          md5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Job3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:network_messages.Job3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_packetcode(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "network_messages.Job3D.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint64 Size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // bool lastPacket = 4;
  if (this->lastpacket() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_lastpacket(), target);
  }

  // repeated bytes fileBytes = 5;
  for (int i = 0, n = this->_internal_filebytes_size(); i < n; i++) {
    const auto& s = this->_internal_filebytes(i);
    target = stream->WriteBytes(5, s, target);
  }

  // uint32 rowId = 6;
  if (this->rowid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rowid(), target);
  }

  // bool Md5 = 7;
  if (this->md5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_md5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:network_messages.Job3D)
  return target;
}

size_t Job3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network_messages.Job3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes fileBytes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filebytes_.size());
  for (int i = 0, n = filebytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      filebytes_.Get(i));
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 Size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  // uint32 packetCode = 1;
  if (this->packetcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_packetcode());
  }

  // bool lastPacket = 4;
  if (this->lastpacket() != 0) {
    total_size += 1 + 1;
  }

  // bool Md5 = 7;
  if (this->md5() != 0) {
    total_size += 1 + 1;
  }

  // uint32 rowId = 6;
  if (this->rowid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rowid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Job3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:network_messages.Job3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Job3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Job3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:network_messages.Job3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:network_messages.Job3D)
    MergeFrom(*source);
  }
}

void Job3D::MergeFrom(const Job3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network_messages.Job3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filebytes_.MergeFrom(from.filebytes_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.packetcode() != 0) {
    _internal_set_packetcode(from._internal_packetcode());
  }
  if (from.lastpacket() != 0) {
    _internal_set_lastpacket(from._internal_lastpacket());
  }
  if (from.md5() != 0) {
    _internal_set_md5(from._internal_md5());
  }
  if (from.rowid() != 0) {
    _internal_set_rowid(from._internal_rowid());
  }
}

void Job3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:network_messages.Job3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job3D::CopyFrom(const Job3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network_messages.Job3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job3D::IsInitialized() const {
  return true;
}

void Job3D::InternalSwap(Job3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filebytes_.InternalSwap(&other->filebytes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Job3D, rowid_)
      + sizeof(Job3D::rowid_)
      - PROTOBUF_FIELD_OFFSET(Job3D, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Job3D::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace network_messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network_messages::NetServerCommands* Arena::CreateMaybeMessage< ::network_messages::NetServerCommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network_messages::NetServerCommands >(arena);
}
template<> PROTOBUF_NOINLINE ::network_messages::NetClientRes* Arena::CreateMaybeMessage< ::network_messages::NetClientRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network_messages::NetClientRes >(arena);
}
template<> PROTOBUF_NOINLINE ::network_messages::PrintProgress* Arena::CreateMaybeMessage< ::network_messages::PrintProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network_messages::PrintProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::network_messages::MachineConfig* Arena::CreateMaybeMessage< ::network_messages::MachineConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network_messages::MachineConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::network_messages::MaterialConfig* Arena::CreateMaybeMessage< ::network_messages::MaterialConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network_messages::MaterialConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::network_messages::MotionConfig* Arena::CreateMaybeMessage< ::network_messages::MotionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network_messages::MotionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::network_messages::Job3D* Arena::CreateMaybeMessage< ::network_messages::Job3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::network_messages::Job3D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
