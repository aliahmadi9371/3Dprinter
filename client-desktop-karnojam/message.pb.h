// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace network_messages {
class Job3D;
class Job3DDefaultTypeInternal;
extern Job3DDefaultTypeInternal _Job3D_default_instance_;
class MachineConfig;
class MachineConfigDefaultTypeInternal;
extern MachineConfigDefaultTypeInternal _MachineConfig_default_instance_;
class MaterialConfig;
class MaterialConfigDefaultTypeInternal;
extern MaterialConfigDefaultTypeInternal _MaterialConfig_default_instance_;
class MotionConfig;
class MotionConfigDefaultTypeInternal;
extern MotionConfigDefaultTypeInternal _MotionConfig_default_instance_;
class NetClientRes;
class NetClientResDefaultTypeInternal;
extern NetClientResDefaultTypeInternal _NetClientRes_default_instance_;
class NetServerCommands;
class NetServerCommandsDefaultTypeInternal;
extern NetServerCommandsDefaultTypeInternal _NetServerCommands_default_instance_;
class PrintProgress;
class PrintProgressDefaultTypeInternal;
extern PrintProgressDefaultTypeInternal _PrintProgress_default_instance_;
}  // namespace network_messages
PROTOBUF_NAMESPACE_OPEN
template<> ::network_messages::Job3D* Arena::CreateMaybeMessage<::network_messages::Job3D>(Arena*);
template<> ::network_messages::MachineConfig* Arena::CreateMaybeMessage<::network_messages::MachineConfig>(Arena*);
template<> ::network_messages::MaterialConfig* Arena::CreateMaybeMessage<::network_messages::MaterialConfig>(Arena*);
template<> ::network_messages::MotionConfig* Arena::CreateMaybeMessage<::network_messages::MotionConfig>(Arena*);
template<> ::network_messages::NetClientRes* Arena::CreateMaybeMessage<::network_messages::NetClientRes>(Arena*);
template<> ::network_messages::NetServerCommands* Arena::CreateMaybeMessage<::network_messages::NetServerCommands>(Arena*);
template<> ::network_messages::PrintProgress* Arena::CreateMaybeMessage<::network_messages::PrintProgress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network_messages {

enum NetServerCommands_PacketType : int {
  NetServerCommands_PacketType_ZeroPacketCode = 0,
  NetServerCommands_PacketType_Projector = 1,
  NetServerCommands_PacketType_Print = 2,
  NetServerCommands_PacketType_MachinStatus = 3,
  NetServerCommands_PacketType_Material = 4,
  NetServerCommands_PacketType_Motion = 5,
  NetServerCommands_PacketType_LicenseStatus = 6,
  NetServerCommands_PacketType_Job = 7,
  NetServerCommands_PacketType_Config = 8,
  NetServerCommands_PacketType_LicenseKey = 9,
  NetServerCommands_PacketType_ManualMV = 10,
  NetServerCommands_PacketType_GetState = 11,
  NetServerCommands_PacketType_NetServerCommands_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetServerCommands_PacketType_NetServerCommands_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetServerCommands_PacketType_IsValid(int value);
constexpr NetServerCommands_PacketType NetServerCommands_PacketType_PacketType_MIN = NetServerCommands_PacketType_ZeroPacketCode;
constexpr NetServerCommands_PacketType NetServerCommands_PacketType_PacketType_MAX = NetServerCommands_PacketType_GetState;
constexpr int NetServerCommands_PacketType_PacketType_ARRAYSIZE = NetServerCommands_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetServerCommands_PacketType_descriptor();
template<typename T>
inline const std::string& NetServerCommands_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetServerCommands_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetServerCommands_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetServerCommands_PacketType_descriptor(), enum_t_value);
}
inline bool NetServerCommands_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetServerCommands_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetServerCommands_PacketType>(
    NetServerCommands_PacketType_descriptor(), name, value);
}
enum NetServerCommands_ProjectorCalibrate : int {
  NetServerCommands_ProjectorCalibrate_ZeroCalibrate = 0,
  NetServerCommands_ProjectorCalibrate_StartCalibrate = 7,
  NetServerCommands_ProjectorCalibrate_FinishCalibrate = 8,
  NetServerCommands_ProjectorCalibrate_GoHomeCalibrate = 16776977,
  NetServerCommands_ProjectorCalibrate_PositionCalibrate = 16776993,
  NetServerCommands_ProjectorCalibrate_LEDIntensityCalibrate = 16777105,
  NetServerCommands_ProjectorCalibrate_MaterialTestCalibrate = 16777089,
  NetServerCommands_ProjectorCalibrate_ProjectorOffCalibrate = 9,
  NetServerCommands_ProjectorCalibrate_EjectUpCalibrate = 16777009,
  NetServerCommands_ProjectorCalibrate_EjectDownCalibrate = 16777010,
  NetServerCommands_ProjectorCalibrate_LEDTurnOn = 11,
  NetServerCommands_ProjectorCalibrate_LEDTurnOff = 12,
  NetServerCommands_ProjectorCalibrate_ShowPattern = 13,
  NetServerCommands_ProjectorCalibrate_MaterialLevel = 14,
  NetServerCommands_ProjectorCalibrate_VacuumFill = 15,
  NetServerCommands_ProjectorCalibrate_GetSensor = 16,
  NetServerCommands_ProjectorCalibrate_NetServerCommands_ProjectorCalibrate_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetServerCommands_ProjectorCalibrate_NetServerCommands_ProjectorCalibrate_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetServerCommands_ProjectorCalibrate_IsValid(int value);
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands_ProjectorCalibrate_ProjectorCalibrate_MIN = NetServerCommands_ProjectorCalibrate_ZeroCalibrate;
constexpr NetServerCommands_ProjectorCalibrate NetServerCommands_ProjectorCalibrate_ProjectorCalibrate_MAX = NetServerCommands_ProjectorCalibrate_LEDIntensityCalibrate;
constexpr int NetServerCommands_ProjectorCalibrate_ProjectorCalibrate_ARRAYSIZE = NetServerCommands_ProjectorCalibrate_ProjectorCalibrate_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetServerCommands_ProjectorCalibrate_descriptor();
template<typename T>
inline const std::string& NetServerCommands_ProjectorCalibrate_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetServerCommands_ProjectorCalibrate>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetServerCommands_ProjectorCalibrate_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetServerCommands_ProjectorCalibrate_descriptor(), enum_t_value);
}
inline bool NetServerCommands_ProjectorCalibrate_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetServerCommands_ProjectorCalibrate* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetServerCommands_ProjectorCalibrate>(
    NetServerCommands_ProjectorCalibrate_descriptor(), name, value);
}
enum NetServerCommands_PrintState : int {
  NetServerCommands_PrintState_ZeroPirint = 0,
  NetServerCommands_PrintState_StartPrint = 11,
  NetServerCommands_PrintState_StopPrint = 12,
  NetServerCommands_PrintState_PausePrint = 13,
  NetServerCommands_PrintState_NetServerCommands_PrintState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetServerCommands_PrintState_NetServerCommands_PrintState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetServerCommands_PrintState_IsValid(int value);
constexpr NetServerCommands_PrintState NetServerCommands_PrintState_PrintState_MIN = NetServerCommands_PrintState_ZeroPirint;
constexpr NetServerCommands_PrintState NetServerCommands_PrintState_PrintState_MAX = NetServerCommands_PrintState_PausePrint;
constexpr int NetServerCommands_PrintState_PrintState_ARRAYSIZE = NetServerCommands_PrintState_PrintState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetServerCommands_PrintState_descriptor();
template<typename T>
inline const std::string& NetServerCommands_PrintState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetServerCommands_PrintState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetServerCommands_PrintState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetServerCommands_PrintState_descriptor(), enum_t_value);
}
inline bool NetServerCommands_PrintState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetServerCommands_PrintState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetServerCommands_PrintState>(
    NetServerCommands_PrintState_descriptor(), name, value);
}
enum NetServerCommands_ManualMVStep : int {
  NetServerCommands_ManualMVStep_ZeroManualMV = 0,
  NetServerCommands_ManualMVStep_BuidlOneUp = 101,
  NetServerCommands_ManualMVStep_BuidlOneDown = 102,
  NetServerCommands_ManualMVStep_BuidlTenUp = 111,
  NetServerCommands_ManualMVStep_BuidlTenDown = 112,
  NetServerCommands_ManualMVStep_BuidlFiftyUp = 121,
  NetServerCommands_ManualMVStep_BuidlFiftyDown = 122,
  NetServerCommands_ManualMVStep_TiltUp = 13,
  NetServerCommands_ManualMVStep_TiltDown = 14,
  NetServerCommands_ManualMVStep_DoorUp = 15,
  NetServerCommands_ManualMVStep_DoorDown = 16,
  NetServerCommands_ManualMVStep_NetServerCommands_ManualMVStep_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetServerCommands_ManualMVStep_NetServerCommands_ManualMVStep_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetServerCommands_ManualMVStep_IsValid(int value);
constexpr NetServerCommands_ManualMVStep NetServerCommands_ManualMVStep_ManualMVStep_MIN = NetServerCommands_ManualMVStep_ZeroManualMV;
constexpr NetServerCommands_ManualMVStep NetServerCommands_ManualMVStep_ManualMVStep_MAX = NetServerCommands_ManualMVStep_BuidlFiftyDown;
constexpr int NetServerCommands_ManualMVStep_ManualMVStep_ARRAYSIZE = NetServerCommands_ManualMVStep_ManualMVStep_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetServerCommands_ManualMVStep_descriptor();
template<typename T>
inline const std::string& NetServerCommands_ManualMVStep_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetServerCommands_ManualMVStep>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetServerCommands_ManualMVStep_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetServerCommands_ManualMVStep_descriptor(), enum_t_value);
}
inline bool NetServerCommands_ManualMVStep_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetServerCommands_ManualMVStep* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetServerCommands_ManualMVStep>(
    NetServerCommands_ManualMVStep_descriptor(), name, value);
}
enum NetClientRes_PacketType : int {
  NetClientRes_PacketType_ZeroPacketCode = 0,
  NetClientRes_PacketType_NotFound = 1,
  NetClientRes_PacketType_Founded = 2,
  NetClientRes_PacketType_Done = 3,
  NetClientRes_PacketType_Error = 4,
  NetClientRes_PacketType_Progress = 5,
  NetClientRes_PacketType_Ready = 6,
  NetClientRes_PacketType_ReadVal = 7,
  NetClientRes_PacketType_CheckFile = 8,
  NetClientRes_PacketType_NetClientRes_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetClientRes_PacketType_NetClientRes_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetClientRes_PacketType_IsValid(int value);
constexpr NetClientRes_PacketType NetClientRes_PacketType_PacketType_MIN = NetClientRes_PacketType_ZeroPacketCode;
constexpr NetClientRes_PacketType NetClientRes_PacketType_PacketType_MAX = NetClientRes_PacketType_CheckFile;
constexpr int NetClientRes_PacketType_PacketType_ARRAYSIZE = NetClientRes_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetClientRes_PacketType_descriptor();
template<typename T>
inline const std::string& NetClientRes_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetClientRes_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetClientRes_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetClientRes_PacketType_descriptor(), enum_t_value);
}
inline bool NetClientRes_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetClientRes_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetClientRes_PacketType>(
    NetClientRes_PacketType_descriptor(), name, value);
}
enum MachineConfig_PacketType : int {
  MachineConfig_PacketType_ZeroPacketCode = 0,
  MachineConfig_PacketType_Add = 1,
  MachineConfig_PacketType_Edit = 2,
  MachineConfig_PacketType_Delete = 3,
  MachineConfig_PacketType_Get = 4,
  MachineConfig_PacketType_GetALL = 5,
  MachineConfig_PacketType_SET = 6,
  MachineConfig_PacketType_MachineConfig_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MachineConfig_PacketType_MachineConfig_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MachineConfig_PacketType_IsValid(int value);
constexpr MachineConfig_PacketType MachineConfig_PacketType_PacketType_MIN = MachineConfig_PacketType_ZeroPacketCode;
constexpr MachineConfig_PacketType MachineConfig_PacketType_PacketType_MAX = MachineConfig_PacketType_SET;
constexpr int MachineConfig_PacketType_PacketType_ARRAYSIZE = MachineConfig_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MachineConfig_PacketType_descriptor();
template<typename T>
inline const std::string& MachineConfig_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MachineConfig_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MachineConfig_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MachineConfig_PacketType_descriptor(), enum_t_value);
}
inline bool MachineConfig_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MachineConfig_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MachineConfig_PacketType>(
    MachineConfig_PacketType_descriptor(), name, value);
}
enum MaterialConfig_PacketType : int {
  MaterialConfig_PacketType_ZeroPacketCode = 0,
  MaterialConfig_PacketType_Add = 1,
  MaterialConfig_PacketType_Edit = 2,
  MaterialConfig_PacketType_Delete = 3,
  MaterialConfig_PacketType_Get = 4,
  MaterialConfig_PacketType_GetALL = 5,
  MaterialConfig_PacketType_MaterialConfig_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MaterialConfig_PacketType_MaterialConfig_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MaterialConfig_PacketType_IsValid(int value);
constexpr MaterialConfig_PacketType MaterialConfig_PacketType_PacketType_MIN = MaterialConfig_PacketType_ZeroPacketCode;
constexpr MaterialConfig_PacketType MaterialConfig_PacketType_PacketType_MAX = MaterialConfig_PacketType_GetALL;
constexpr int MaterialConfig_PacketType_PacketType_ARRAYSIZE = MaterialConfig_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MaterialConfig_PacketType_descriptor();
template<typename T>
inline const std::string& MaterialConfig_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MaterialConfig_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MaterialConfig_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MaterialConfig_PacketType_descriptor(), enum_t_value);
}
inline bool MaterialConfig_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MaterialConfig_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MaterialConfig_PacketType>(
    MaterialConfig_PacketType_descriptor(), name, value);
}
enum MotionConfig_PacketType : int {
  MotionConfig_PacketType_ZeroPacketCode = 0,
  MotionConfig_PacketType_Add = 1,
  MotionConfig_PacketType_Edit = 2,
  MotionConfig_PacketType_Delete = 3,
  MotionConfig_PacketType_Get = 4,
  MotionConfig_PacketType_GetALL = 5,
  MotionConfig_PacketType_MotionConfig_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MotionConfig_PacketType_MotionConfig_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MotionConfig_PacketType_IsValid(int value);
constexpr MotionConfig_PacketType MotionConfig_PacketType_PacketType_MIN = MotionConfig_PacketType_ZeroPacketCode;
constexpr MotionConfig_PacketType MotionConfig_PacketType_PacketType_MAX = MotionConfig_PacketType_GetALL;
constexpr int MotionConfig_PacketType_PacketType_ARRAYSIZE = MotionConfig_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionConfig_PacketType_descriptor();
template<typename T>
inline const std::string& MotionConfig_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotionConfig_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotionConfig_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotionConfig_PacketType_descriptor(), enum_t_value);
}
inline bool MotionConfig_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotionConfig_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotionConfig_PacketType>(
    MotionConfig_PacketType_descriptor(), name, value);
}
enum Job3D_PacketType : int {
  Job3D_PacketType_ZeroPacketCode = 0,
  Job3D_PacketType_Add = 1,
  Job3D_PacketType_Edit = 2,
  Job3D_PacketType_Delete = 3,
  Job3D_PacketType_Get = 4,
  Job3D_PacketType_GetALL = 5,
  Job3D_PacketType_CheckFile = 6,
  Job3D_PacketType_Job3D_PacketType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Job3D_PacketType_Job3D_PacketType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Job3D_PacketType_IsValid(int value);
constexpr Job3D_PacketType Job3D_PacketType_PacketType_MIN = Job3D_PacketType_ZeroPacketCode;
constexpr Job3D_PacketType Job3D_PacketType_PacketType_MAX = Job3D_PacketType_CheckFile;
constexpr int Job3D_PacketType_PacketType_ARRAYSIZE = Job3D_PacketType_PacketType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Job3D_PacketType_descriptor();
template<typename T>
inline const std::string& Job3D_PacketType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Job3D_PacketType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Job3D_PacketType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Job3D_PacketType_descriptor(), enum_t_value);
}
inline bool Job3D_PacketType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Job3D_PacketType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Job3D_PacketType>(
    Job3D_PacketType_descriptor(), name, value);
}
// ===================================================================

class NetServerCommands PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network_messages.NetServerCommands) */ {
 public:
  inline NetServerCommands() : NetServerCommands(nullptr) {}
  virtual ~NetServerCommands();

  NetServerCommands(const NetServerCommands& from);
  NetServerCommands(NetServerCommands&& from) noexcept
    : NetServerCommands() {
    *this = ::std::move(from);
  }

  inline NetServerCommands& operator=(const NetServerCommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetServerCommands& operator=(NetServerCommands&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetServerCommands& default_instance();

  static inline const NetServerCommands* internal_default_instance() {
    return reinterpret_cast<const NetServerCommands*>(
               &_NetServerCommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetServerCommands& a, NetServerCommands& b) {
    a.Swap(&b);
  }
  inline void Swap(NetServerCommands* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetServerCommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetServerCommands* New() const final {
    return CreateMaybeMessage<NetServerCommands>(nullptr);
  }

  NetServerCommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetServerCommands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetServerCommands& from);
  void MergeFrom(const NetServerCommands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetServerCommands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network_messages.NetServerCommands";
  }
  protected:
  explicit NetServerCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NetServerCommands_PacketType PacketType;
  static constexpr PacketType ZeroPacketCode =
    NetServerCommands_PacketType_ZeroPacketCode;
  static constexpr PacketType Projector =
    NetServerCommands_PacketType_Projector;
  static constexpr PacketType Print =
    NetServerCommands_PacketType_Print;
  static constexpr PacketType MachinStatus =
    NetServerCommands_PacketType_MachinStatus;
  static constexpr PacketType Material =
    NetServerCommands_PacketType_Material;
  static constexpr PacketType Motion =
    NetServerCommands_PacketType_Motion;
  static constexpr PacketType LicenseStatus =
    NetServerCommands_PacketType_LicenseStatus;
  static constexpr PacketType Job =
    NetServerCommands_PacketType_Job;
  static constexpr PacketType Config =
    NetServerCommands_PacketType_Config;
  static constexpr PacketType LicenseKey =
    NetServerCommands_PacketType_LicenseKey;
  static constexpr PacketType ManualMV =
    NetServerCommands_PacketType_ManualMV;
  static constexpr PacketType GetState =
    NetServerCommands_PacketType_GetState;
  static inline bool PacketType_IsValid(int value) {
    return NetServerCommands_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    NetServerCommands_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    NetServerCommands_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    NetServerCommands_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return NetServerCommands_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return NetServerCommands_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return NetServerCommands_PacketType_Parse(name, value);
  }

  typedef NetServerCommands_ProjectorCalibrate ProjectorCalibrate;
  static constexpr ProjectorCalibrate ZeroCalibrate =
    NetServerCommands_ProjectorCalibrate_ZeroCalibrate;
  static constexpr ProjectorCalibrate StartCalibrate =
    NetServerCommands_ProjectorCalibrate_StartCalibrate;
  static constexpr ProjectorCalibrate FinishCalibrate =
    NetServerCommands_ProjectorCalibrate_FinishCalibrate;
  static constexpr ProjectorCalibrate GoHomeCalibrate =
    NetServerCommands_ProjectorCalibrate_GoHomeCalibrate;
  static constexpr ProjectorCalibrate PositionCalibrate =
    NetServerCommands_ProjectorCalibrate_PositionCalibrate;
  static constexpr ProjectorCalibrate LEDIntensityCalibrate =
    NetServerCommands_ProjectorCalibrate_LEDIntensityCalibrate;
  static constexpr ProjectorCalibrate MaterialTestCalibrate =
    NetServerCommands_ProjectorCalibrate_MaterialTestCalibrate;
  static constexpr ProjectorCalibrate ProjectorOffCalibrate =
    NetServerCommands_ProjectorCalibrate_ProjectorOffCalibrate;
  static constexpr ProjectorCalibrate EjectUpCalibrate =
    NetServerCommands_ProjectorCalibrate_EjectUpCalibrate;
  static constexpr ProjectorCalibrate EjectDownCalibrate =
    NetServerCommands_ProjectorCalibrate_EjectDownCalibrate;
  static constexpr ProjectorCalibrate LEDTurnOn =
    NetServerCommands_ProjectorCalibrate_LEDTurnOn;
  static constexpr ProjectorCalibrate LEDTurnOff =
    NetServerCommands_ProjectorCalibrate_LEDTurnOff;
  static constexpr ProjectorCalibrate ShowPattern =
    NetServerCommands_ProjectorCalibrate_ShowPattern;
  static constexpr ProjectorCalibrate MaterialLevel =
    NetServerCommands_ProjectorCalibrate_MaterialLevel;
  static constexpr ProjectorCalibrate VacuumFill =
    NetServerCommands_ProjectorCalibrate_VacuumFill;
  static constexpr ProjectorCalibrate GetSensor =
    NetServerCommands_ProjectorCalibrate_GetSensor;
  static inline bool ProjectorCalibrate_IsValid(int value) {
    return NetServerCommands_ProjectorCalibrate_IsValid(value);
  }
  static constexpr ProjectorCalibrate ProjectorCalibrate_MIN =
    NetServerCommands_ProjectorCalibrate_ProjectorCalibrate_MIN;
  static constexpr ProjectorCalibrate ProjectorCalibrate_MAX =
    NetServerCommands_ProjectorCalibrate_ProjectorCalibrate_MAX;
  static constexpr int ProjectorCalibrate_ARRAYSIZE =
    NetServerCommands_ProjectorCalibrate_ProjectorCalibrate_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProjectorCalibrate_descriptor() {
    return NetServerCommands_ProjectorCalibrate_descriptor();
  }
  template<typename T>
  static inline const std::string& ProjectorCalibrate_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProjectorCalibrate>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProjectorCalibrate_Name.");
    return NetServerCommands_ProjectorCalibrate_Name(enum_t_value);
  }
  static inline bool ProjectorCalibrate_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProjectorCalibrate* value) {
    return NetServerCommands_ProjectorCalibrate_Parse(name, value);
  }

  typedef NetServerCommands_PrintState PrintState;
  static constexpr PrintState ZeroPirint =
    NetServerCommands_PrintState_ZeroPirint;
  static constexpr PrintState StartPrint =
    NetServerCommands_PrintState_StartPrint;
  static constexpr PrintState StopPrint =
    NetServerCommands_PrintState_StopPrint;
  static constexpr PrintState PausePrint =
    NetServerCommands_PrintState_PausePrint;
  static inline bool PrintState_IsValid(int value) {
    return NetServerCommands_PrintState_IsValid(value);
  }
  static constexpr PrintState PrintState_MIN =
    NetServerCommands_PrintState_PrintState_MIN;
  static constexpr PrintState PrintState_MAX =
    NetServerCommands_PrintState_PrintState_MAX;
  static constexpr int PrintState_ARRAYSIZE =
    NetServerCommands_PrintState_PrintState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PrintState_descriptor() {
    return NetServerCommands_PrintState_descriptor();
  }
  template<typename T>
  static inline const std::string& PrintState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PrintState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PrintState_Name.");
    return NetServerCommands_PrintState_Name(enum_t_value);
  }
  static inline bool PrintState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PrintState* value) {
    return NetServerCommands_PrintState_Parse(name, value);
  }

  typedef NetServerCommands_ManualMVStep ManualMVStep;
  static constexpr ManualMVStep ZeroManualMV =
    NetServerCommands_ManualMVStep_ZeroManualMV;
  static constexpr ManualMVStep BuidlOneUp =
    NetServerCommands_ManualMVStep_BuidlOneUp;
  static constexpr ManualMVStep BuidlOneDown =
    NetServerCommands_ManualMVStep_BuidlOneDown;
  static constexpr ManualMVStep BuidlTenUp =
    NetServerCommands_ManualMVStep_BuidlTenUp;
  static constexpr ManualMVStep BuidlTenDown =
    NetServerCommands_ManualMVStep_BuidlTenDown;
  static constexpr ManualMVStep BuidlFiftyUp =
    NetServerCommands_ManualMVStep_BuidlFiftyUp;
  static constexpr ManualMVStep BuidlFiftyDown =
    NetServerCommands_ManualMVStep_BuidlFiftyDown;
  static constexpr ManualMVStep TiltUp =
    NetServerCommands_ManualMVStep_TiltUp;
  static constexpr ManualMVStep TiltDown =
    NetServerCommands_ManualMVStep_TiltDown;
  static constexpr ManualMVStep DoorUp =
    NetServerCommands_ManualMVStep_DoorUp;
  static constexpr ManualMVStep DoorDown =
    NetServerCommands_ManualMVStep_DoorDown;
  static inline bool ManualMVStep_IsValid(int value) {
    return NetServerCommands_ManualMVStep_IsValid(value);
  }
  static constexpr ManualMVStep ManualMVStep_MIN =
    NetServerCommands_ManualMVStep_ManualMVStep_MIN;
  static constexpr ManualMVStep ManualMVStep_MAX =
    NetServerCommands_ManualMVStep_ManualMVStep_MAX;
  static constexpr int ManualMVStep_ARRAYSIZE =
    NetServerCommands_ManualMVStep_ManualMVStep_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ManualMVStep_descriptor() {
    return NetServerCommands_ManualMVStep_descriptor();
  }
  template<typename T>
  static inline const std::string& ManualMVStep_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ManualMVStep>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ManualMVStep_Name.");
    return NetServerCommands_ManualMVStep_Name(enum_t_value);
  }
  static inline bool ManualMVStep_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ManualMVStep* value) {
    return NetServerCommands_ManualMVStep_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIRequestedCodeFieldNumber = 12,
    kILicenseKeyFieldNumber = 13,
    kMachineConfFieldNumber = 14,
    kMaterialConfigFieldNumber = 15,
    kMotionConfigFieldNumber = 16,
    kJob3DFieldNumber = 17,
    kICalibrStateFieldNumber = 1,
    kIGoPosFieldNumber = 2,
    kIPrintStateFieldNumber = 3,
    kIMachineStatusFieldNumber = 4,
    kGetstatusFieldNumber = 5,
    kMaterialIdFieldNumber = 6,
    kMotionIdFieldNumber = 7,
    kIManualMVFieldNumber = 8,
    kIMatPatFieldNumber = 9,
    kILicenseStatusFieldNumber = 10,
    kIRenewLicenseFieldNumber = 11,
    kFMaterialLevelmmFieldNumber = 18,
    kFFillVacuumSecFieldNumber = 19,
    kPacketCodeFieldNumber = 20,
    kJobIdFieldNumber = 23,
  };
  // repeated bytes iRequestedCode = 12;
  int irequestedcode_size() const;
  private:
  int _internal_irequestedcode_size() const;
  public:
  void clear_irequestedcode();
  const std::string& irequestedcode(int index) const;
  std::string* mutable_irequestedcode(int index);
  void set_irequestedcode(int index, const std::string& value);
  void set_irequestedcode(int index, std::string&& value);
  void set_irequestedcode(int index, const char* value);
  void set_irequestedcode(int index, const void* value, size_t size);
  std::string* add_irequestedcode();
  void add_irequestedcode(const std::string& value);
  void add_irequestedcode(std::string&& value);
  void add_irequestedcode(const char* value);
  void add_irequestedcode(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& irequestedcode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_irequestedcode();
  private:
  const std::string& _internal_irequestedcode(int index) const;
  std::string* _internal_add_irequestedcode();
  public:

  // repeated bytes iLicenseKey = 13;
  int ilicensekey_size() const;
  private:
  int _internal_ilicensekey_size() const;
  public:
  void clear_ilicensekey();
  const std::string& ilicensekey(int index) const;
  std::string* mutable_ilicensekey(int index);
  void set_ilicensekey(int index, const std::string& value);
  void set_ilicensekey(int index, std::string&& value);
  void set_ilicensekey(int index, const char* value);
  void set_ilicensekey(int index, const void* value, size_t size);
  std::string* add_ilicensekey();
  void add_ilicensekey(const std::string& value);
  void add_ilicensekey(std::string&& value);
  void add_ilicensekey(const char* value);
  void add_ilicensekey(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ilicensekey() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ilicensekey();
  private:
  const std::string& _internal_ilicensekey(int index) const;
  std::string* _internal_add_ilicensekey();
  public:

  // .network_messages.MachineConfig machineConf = 14;
  bool has_machineconf() const;
  private:
  bool _internal_has_machineconf() const;
  public:
  void clear_machineconf();
  const ::network_messages::MachineConfig& machineconf() const;
  ::network_messages::MachineConfig* release_machineconf();
  ::network_messages::MachineConfig* mutable_machineconf();
  void set_allocated_machineconf(::network_messages::MachineConfig* machineconf);
  private:
  const ::network_messages::MachineConfig& _internal_machineconf() const;
  ::network_messages::MachineConfig* _internal_mutable_machineconf();
  public:
  void unsafe_arena_set_allocated_machineconf(
      ::network_messages::MachineConfig* machineconf);
  ::network_messages::MachineConfig* unsafe_arena_release_machineconf();

  // .network_messages.MaterialConfig materialConfig = 15;
  bool has_materialconfig() const;
  private:
  bool _internal_has_materialconfig() const;
  public:
  void clear_materialconfig();
  const ::network_messages::MaterialConfig& materialconfig() const;
  ::network_messages::MaterialConfig* release_materialconfig();
  ::network_messages::MaterialConfig* mutable_materialconfig();
  void set_allocated_materialconfig(::network_messages::MaterialConfig* materialconfig);
  private:
  const ::network_messages::MaterialConfig& _internal_materialconfig() const;
  ::network_messages::MaterialConfig* _internal_mutable_materialconfig();
  public:
  void unsafe_arena_set_allocated_materialconfig(
      ::network_messages::MaterialConfig* materialconfig);
  ::network_messages::MaterialConfig* unsafe_arena_release_materialconfig();

  // .network_messages.MotionConfig motionConfig = 16;
  bool has_motionconfig() const;
  private:
  bool _internal_has_motionconfig() const;
  public:
  void clear_motionconfig();
  const ::network_messages::MotionConfig& motionconfig() const;
  ::network_messages::MotionConfig* release_motionconfig();
  ::network_messages::MotionConfig* mutable_motionconfig();
  void set_allocated_motionconfig(::network_messages::MotionConfig* motionconfig);
  private:
  const ::network_messages::MotionConfig& _internal_motionconfig() const;
  ::network_messages::MotionConfig* _internal_mutable_motionconfig();
  public:
  void unsafe_arena_set_allocated_motionconfig(
      ::network_messages::MotionConfig* motionconfig);
  ::network_messages::MotionConfig* unsafe_arena_release_motionconfig();

  // .network_messages.Job3D job3D = 17;
  bool has_job3d() const;
  private:
  bool _internal_has_job3d() const;
  public:
  void clear_job3d();
  const ::network_messages::Job3D& job3d() const;
  ::network_messages::Job3D* release_job3d();
  ::network_messages::Job3D* mutable_job3d();
  void set_allocated_job3d(::network_messages::Job3D* job3d);
  private:
  const ::network_messages::Job3D& _internal_job3d() const;
  ::network_messages::Job3D* _internal_mutable_job3d();
  public:
  void unsafe_arena_set_allocated_job3d(
      ::network_messages::Job3D* job3d);
  ::network_messages::Job3D* unsafe_arena_release_job3d();

  // uint32 iCalibrState = 1;
  void clear_icalibrstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 icalibrstate() const;
  void set_icalibrstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_icalibrstate() const;
  void _internal_set_icalibrstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iGoPos = 2;
  void clear_igopos();
  ::PROTOBUF_NAMESPACE_ID::uint32 igopos() const;
  void set_igopos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_igopos() const;
  void _internal_set_igopos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iPrintState = 3;
  void clear_iprintstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 iprintstate() const;
  void set_iprintstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iprintstate() const;
  void _internal_set_iprintstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iMachineStatus = 4;
  void clear_imachinestatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 imachinestatus() const;
  void set_imachinestatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imachinestatus() const;
  void _internal_set_imachinestatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 getstatus = 5;
  void clear_getstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 getstatus() const;
  void set_getstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_getstatus() const;
  void _internal_set_getstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 materialId = 6;
  void clear_materialid();
  ::PROTOBUF_NAMESPACE_ID::uint32 materialid() const;
  void set_materialid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_materialid() const;
  void _internal_set_materialid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 motionId = 7;
  void clear_motionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 motionid() const;
  void set_motionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_motionid() const;
  void _internal_set_motionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iManualMV = 8;
  void clear_imanualmv();
  ::PROTOBUF_NAMESPACE_ID::uint32 imanualmv() const;
  void set_imanualmv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imanualmv() const;
  void _internal_set_imanualmv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iMatPat = 9;
  void clear_imatpat();
  ::PROTOBUF_NAMESPACE_ID::uint32 imatpat() const;
  void set_imatpat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_imatpat() const;
  void _internal_set_imatpat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iLicenseStatus = 10;
  void clear_ilicensestatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 ilicensestatus() const;
  void set_ilicensestatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ilicensestatus() const;
  void _internal_set_ilicensestatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iRenewLicense = 11;
  void clear_irenewlicense();
  ::PROTOBUF_NAMESPACE_ID::uint32 irenewlicense() const;
  void set_irenewlicense(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_irenewlicense() const;
  void _internal_set_irenewlicense(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float fMaterialLevelmm = 18;
  void clear_fmateriallevelmm();
  float fmateriallevelmm() const;
  void set_fmateriallevelmm(float value);
  private:
  float _internal_fmateriallevelmm() const;
  void _internal_set_fmateriallevelmm(float value);
  public:

  // float fFillVacuumSec = 19;
  void clear_ffillvacuumsec();
  float ffillvacuumsec() const;
  void set_ffillvacuumsec(float value);
  private:
  float _internal_ffillvacuumsec() const;
  void _internal_set_ffillvacuumsec(float value);
  public:

  // uint32 packetCode = 20;
  void clear_packetcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode() const;
  void set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetcode() const;
  void _internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 jobId = 23;
  void clear_jobid();
  ::PROTOBUF_NAMESPACE_ID::uint32 jobid() const;
  void set_jobid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_jobid() const;
  void _internal_set_jobid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network_messages.NetServerCommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> irequestedcode_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ilicensekey_;
  ::network_messages::MachineConfig* machineconf_;
  ::network_messages::MaterialConfig* materialconfig_;
  ::network_messages::MotionConfig* motionconfig_;
  ::network_messages::Job3D* job3d_;
  ::PROTOBUF_NAMESPACE_ID::uint32 icalibrstate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 igopos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iprintstate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 imachinestatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 getstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 materialid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 motionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 imanualmv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 imatpat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ilicensestatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 irenewlicense_;
  float fmateriallevelmm_;
  float ffillvacuumsec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jobid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class NetClientRes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network_messages.NetClientRes) */ {
 public:
  inline NetClientRes() : NetClientRes(nullptr) {}
  virtual ~NetClientRes();

  NetClientRes(const NetClientRes& from);
  NetClientRes(NetClientRes&& from) noexcept
    : NetClientRes() {
    *this = ::std::move(from);
  }

  inline NetClientRes& operator=(const NetClientRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetClientRes& operator=(NetClientRes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetClientRes& default_instance();

  static inline const NetClientRes* internal_default_instance() {
    return reinterpret_cast<const NetClientRes*>(
               &_NetClientRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetClientRes& a, NetClientRes& b) {
    a.Swap(&b);
  }
  inline void Swap(NetClientRes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetClientRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetClientRes* New() const final {
    return CreateMaybeMessage<NetClientRes>(nullptr);
  }

  NetClientRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetClientRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetClientRes& from);
  void MergeFrom(const NetClientRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetClientRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network_messages.NetClientRes";
  }
  protected:
  explicit NetClientRes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NetClientRes_PacketType PacketType;
  static constexpr PacketType ZeroPacketCode =
    NetClientRes_PacketType_ZeroPacketCode;
  static constexpr PacketType NotFound =
    NetClientRes_PacketType_NotFound;
  static constexpr PacketType Founded =
    NetClientRes_PacketType_Founded;
  static constexpr PacketType Done =
    NetClientRes_PacketType_Done;
  static constexpr PacketType Error =
    NetClientRes_PacketType_Error;
  static constexpr PacketType Progress =
    NetClientRes_PacketType_Progress;
  static constexpr PacketType Ready =
    NetClientRes_PacketType_Ready;
  static constexpr PacketType ReadVal =
    NetClientRes_PacketType_ReadVal;
  static constexpr PacketType CheckFile =
    NetClientRes_PacketType_CheckFile;
  static inline bool PacketType_IsValid(int value) {
    return NetClientRes_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    NetClientRes_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    NetClientRes_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    NetClientRes_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return NetClientRes_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return NetClientRes_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return NetClientRes_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConfsFieldNumber = 2,
    kMaterialsFieldNumber = 3,
    kMotionsFieldNumber = 4,
    kJobsFieldNumber = 5,
    kFileBytesFieldNumber = 11,
    kErrorMesgFieldNumber = 6,
    kMd5FieldNumber = 14,
    kPacketCodeFieldNumber = 1,
    kProgressFieldNumber = 7,
    kSizeFieldNumber = 8,
    kCurrentSliceFieldNumber = 9,
    kTotalSliceFieldNumber = 10,
    kRemainingTimeFieldNumber = 12,
    kSensorValFieldNumber = 13,
  };
  // repeated .network_messages.MachineConfig confs = 2;
  int confs_size() const;
  private:
  int _internal_confs_size() const;
  public:
  void clear_confs();
  ::network_messages::MachineConfig* mutable_confs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MachineConfig >*
      mutable_confs();
  private:
  const ::network_messages::MachineConfig& _internal_confs(int index) const;
  ::network_messages::MachineConfig* _internal_add_confs();
  public:
  const ::network_messages::MachineConfig& confs(int index) const;
  ::network_messages::MachineConfig* add_confs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MachineConfig >&
      confs() const;

  // repeated .network_messages.MaterialConfig materials = 3;
  int materials_size() const;
  private:
  int _internal_materials_size() const;
  public:
  void clear_materials();
  ::network_messages::MaterialConfig* mutable_materials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MaterialConfig >*
      mutable_materials();
  private:
  const ::network_messages::MaterialConfig& _internal_materials(int index) const;
  ::network_messages::MaterialConfig* _internal_add_materials();
  public:
  const ::network_messages::MaterialConfig& materials(int index) const;
  ::network_messages::MaterialConfig* add_materials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MaterialConfig >&
      materials() const;

  // repeated .network_messages.MotionConfig motions = 4;
  int motions_size() const;
  private:
  int _internal_motions_size() const;
  public:
  void clear_motions();
  ::network_messages::MotionConfig* mutable_motions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MotionConfig >*
      mutable_motions();
  private:
  const ::network_messages::MotionConfig& _internal_motions(int index) const;
  ::network_messages::MotionConfig* _internal_add_motions();
  public:
  const ::network_messages::MotionConfig& motions(int index) const;
  ::network_messages::MotionConfig* add_motions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MotionConfig >&
      motions() const;

  // repeated .network_messages.Job3D jobs = 5;
  int jobs_size() const;
  private:
  int _internal_jobs_size() const;
  public:
  void clear_jobs();
  ::network_messages::Job3D* mutable_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::Job3D >*
      mutable_jobs();
  private:
  const ::network_messages::Job3D& _internal_jobs(int index) const;
  ::network_messages::Job3D* _internal_add_jobs();
  public:
  const ::network_messages::Job3D& jobs(int index) const;
  ::network_messages::Job3D* add_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::Job3D >&
      jobs() const;

  // repeated bytes fileBytes = 11;
  int filebytes_size() const;
  private:
  int _internal_filebytes_size() const;
  public:
  void clear_filebytes();
  const std::string& filebytes(int index) const;
  std::string* mutable_filebytes(int index);
  void set_filebytes(int index, const std::string& value);
  void set_filebytes(int index, std::string&& value);
  void set_filebytes(int index, const char* value);
  void set_filebytes(int index, const void* value, size_t size);
  std::string* add_filebytes();
  void add_filebytes(const std::string& value);
  void add_filebytes(std::string&& value);
  void add_filebytes(const char* value);
  void add_filebytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filebytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filebytes();
  private:
  const std::string& _internal_filebytes(int index) const;
  std::string* _internal_add_filebytes();
  public:

  // string errorMesg = 6;
  void clear_errormesg();
  const std::string& errormesg() const;
  void set_errormesg(const std::string& value);
  void set_errormesg(std::string&& value);
  void set_errormesg(const char* value);
  void set_errormesg(const char* value, size_t size);
  std::string* mutable_errormesg();
  std::string* release_errormesg();
  void set_allocated_errormesg(std::string* errormesg);
  private:
  const std::string& _internal_errormesg() const;
  void _internal_set_errormesg(const std::string& value);
  std::string* _internal_mutable_errormesg();
  public:

  // bytes Md5 = 14;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const void* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // uint32 packetCode = 1;
  void clear_packetcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode() const;
  void set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetcode() const;
  void _internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 progress = 7;
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::uint32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 size = 8;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 currentSlice = 9;
  void clear_currentslice();
  ::PROTOBUF_NAMESPACE_ID::uint32 currentslice() const;
  void set_currentslice(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_currentslice() const;
  void _internal_set_currentslice(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 totalSlice = 10;
  void clear_totalslice();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalslice() const;
  void set_totalslice(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalslice() const;
  void _internal_set_totalslice(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 remaining_time = 12;
  void clear_remaining_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_time() const;
  void set_remaining_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remaining_time() const;
  void _internal_set_remaining_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float sensorVal = 13;
  void clear_sensorval();
  float sensorval() const;
  void set_sensorval(float value);
  private:
  float _internal_sensorval() const;
  void _internal_set_sensorval(float value);
  public:

  // @@protoc_insertion_point(class_scope:network_messages.NetClientRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MachineConfig > confs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MaterialConfig > materials_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MotionConfig > motions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::Job3D > jobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filebytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormesg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 progress_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 currentslice_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalslice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remaining_time_;
  float sensorval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PrintProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network_messages.PrintProgress) */ {
 public:
  inline PrintProgress() : PrintProgress(nullptr) {}
  virtual ~PrintProgress();

  PrintProgress(const PrintProgress& from);
  PrintProgress(PrintProgress&& from) noexcept
    : PrintProgress() {
    *this = ::std::move(from);
  }

  inline PrintProgress& operator=(const PrintProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrintProgress& operator=(PrintProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrintProgress& default_instance();

  static inline const PrintProgress* internal_default_instance() {
    return reinterpret_cast<const PrintProgress*>(
               &_PrintProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrintProgress& a, PrintProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(PrintProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrintProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrintProgress* New() const final {
    return CreateMaybeMessage<PrintProgress>(nullptr);
  }

  PrintProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrintProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrintProgress& from);
  void MergeFrom(const PrintProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrintProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network_messages.PrintProgress";
  }
  protected:
  explicit PrintProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:network_messages.PrintProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MachineConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network_messages.MachineConfig) */ {
 public:
  inline MachineConfig() : MachineConfig(nullptr) {}
  virtual ~MachineConfig();

  MachineConfig(const MachineConfig& from);
  MachineConfig(MachineConfig&& from) noexcept
    : MachineConfig() {
    *this = ::std::move(from);
  }

  inline MachineConfig& operator=(const MachineConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MachineConfig& operator=(MachineConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MachineConfig& default_instance();

  static inline const MachineConfig* internal_default_instance() {
    return reinterpret_cast<const MachineConfig*>(
               &_MachineConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MachineConfig& a, MachineConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MachineConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MachineConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MachineConfig* New() const final {
    return CreateMaybeMessage<MachineConfig>(nullptr);
  }

  MachineConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MachineConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MachineConfig& from);
  void MergeFrom(const MachineConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MachineConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network_messages.MachineConfig";
  }
  protected:
  explicit MachineConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MachineConfig_PacketType PacketType;
  static constexpr PacketType ZeroPacketCode =
    MachineConfig_PacketType_ZeroPacketCode;
  static constexpr PacketType Add =
    MachineConfig_PacketType_Add;
  static constexpr PacketType Edit =
    MachineConfig_PacketType_Edit;
  static constexpr PacketType Delete =
    MachineConfig_PacketType_Delete;
  static constexpr PacketType Get =
    MachineConfig_PacketType_Get;
  static constexpr PacketType GetALL =
    MachineConfig_PacketType_GetALL;
  static constexpr PacketType SET =
    MachineConfig_PacketType_SET;
  static inline bool PacketType_IsValid(int value) {
    return MachineConfig_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    MachineConfig_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    MachineConfig_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    MachineConfig_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return MachineConfig_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return MachineConfig_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return MachineConfig_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMachineNoFieldNumber = 3,
    kPacketCodeFieldNumber = 1,
    kModelCodeFieldNumber = 2,
    kVersionFieldNumber = 4,
    kSubVersionFieldNumber = 5,
    kPrinterUnitFieldNumber = 7,
    kZUpperLimitFieldNumber = 8,
    kProjectorProtocolFieldNumber = 9,
    kNoOfMaskPointsFieldNumber = 10,
    kMaxIntensityFieldNumber = 11,
    kMinIntensityFieldNumber = 12,
    kNeedLicenseFieldNumber = 6,
    kHasDoorFieldNumber = 13,
    kHasErmFieldNumber = 14,
    kBUpTDownConfigFieldNumber = 17,
    kGProjectWidthFieldNumber = 15,
    kGProjectHeightFieldNumber = 16,
    kRowIdFieldNumber = 18,
    kHasPlungerFieldNumber = 19,
    kTDownZHomePosFieldNumber = 20,
    kVacuumTimerFieldNumber = 21,
    kSensorSetPointVacuumFieldNumber = 22,
    kSensorSetPointFieldNumber = 23,
    kSensorThresholdFieldNumber = 24,
    kXShiftFieldNumber = 25,
    kYShiftFieldNumber = 26,
    kMaxIntensitySensorFieldNumber = 27,
    kMinIntensitySensorFieldNumber = 28,
  };
  // string MachineNo = 3;
  void clear_machineno();
  const std::string& machineno() const;
  void set_machineno(const std::string& value);
  void set_machineno(std::string&& value);
  void set_machineno(const char* value);
  void set_machineno(const char* value, size_t size);
  std::string* mutable_machineno();
  std::string* release_machineno();
  void set_allocated_machineno(std::string* machineno);
  private:
  const std::string& _internal_machineno() const;
  void _internal_set_machineno(const std::string& value);
  std::string* _internal_mutable_machineno();
  public:

  // uint32 packetCode = 1;
  void clear_packetcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode() const;
  void set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetcode() const;
  void _internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ModelCode = 2;
  void clear_modelcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 modelcode() const;
  void set_modelcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_modelcode() const;
  void _internal_set_modelcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Version = 4;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SubVersion = 5;
  void clear_subversion();
  ::PROTOBUF_NAMESPACE_ID::uint32 subversion() const;
  void set_subversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subversion() const;
  void _internal_set_subversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float PrinterUnit = 7;
  void clear_printerunit();
  float printerunit() const;
  void set_printerunit(float value);
  private:
  float _internal_printerunit() const;
  void _internal_set_printerunit(float value);
  public:

  // uint32 ZUpperLimit = 8;
  void clear_zupperlimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 zupperlimit() const;
  void set_zupperlimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_zupperlimit() const;
  void _internal_set_zupperlimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ProjectorProtocol = 9;
  void clear_projectorprotocol();
  ::PROTOBUF_NAMESPACE_ID::uint32 projectorprotocol() const;
  void set_projectorprotocol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_projectorprotocol() const;
  void _internal_set_projectorprotocol(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 NoOfMaskPoints = 10;
  void clear_noofmaskpoints();
  ::PROTOBUF_NAMESPACE_ID::uint32 noofmaskpoints() const;
  void set_noofmaskpoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_noofmaskpoints() const;
  void _internal_set_noofmaskpoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MaxIntensity = 11;
  void clear_maxintensity();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxintensity() const;
  void set_maxintensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxintensity() const;
  void _internal_set_maxintensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MinIntensity = 12;
  void clear_minintensity();
  ::PROTOBUF_NAMESPACE_ID::uint32 minintensity() const;
  void set_minintensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minintensity() const;
  void _internal_set_minintensity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool NeedLicense = 6;
  void clear_needlicense();
  bool needlicense() const;
  void set_needlicense(bool value);
  private:
  bool _internal_needlicense() const;
  void _internal_set_needlicense(bool value);
  public:

  // bool HasDoor = 13;
  void clear_hasdoor();
  bool hasdoor() const;
  void set_hasdoor(bool value);
  private:
  bool _internal_hasdoor() const;
  void _internal_set_hasdoor(bool value);
  public:

  // bool HasErm = 14;
  void clear_haserm();
  bool haserm() const;
  void set_haserm(bool value);
  private:
  bool _internal_haserm() const;
  void _internal_set_haserm(bool value);
  public:

  // bool BUpTDownConfig = 17;
  void clear_buptdownconfig();
  bool buptdownconfig() const;
  void set_buptdownconfig(bool value);
  private:
  bool _internal_buptdownconfig() const;
  void _internal_set_buptdownconfig(bool value);
  public:

  // uint32 gProjectWidth = 15;
  void clear_gprojectwidth();
  ::PROTOBUF_NAMESPACE_ID::uint32 gprojectwidth() const;
  void set_gprojectwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gprojectwidth() const;
  void _internal_set_gprojectwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gProjectHeight = 16;
  void clear_gprojectheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 gprojectheight() const;
  void set_gprojectheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gprojectheight() const;
  void _internal_set_gprojectheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rowId = 18;
  void clear_rowid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rowid() const;
  void set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rowid() const;
  void _internal_set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool HasPlunger = 19;
  void clear_hasplunger();
  bool hasplunger() const;
  void set_hasplunger(bool value);
  private:
  bool _internal_hasplunger() const;
  void _internal_set_hasplunger(bool value);
  public:

  // uint32 TDownZHomePos = 20;
  void clear_tdownzhomepos();
  ::PROTOBUF_NAMESPACE_ID::uint32 tdownzhomepos() const;
  void set_tdownzhomepos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tdownzhomepos() const;
  void _internal_set_tdownzhomepos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float vacuumTimer = 21;
  void clear_vacuumtimer();
  float vacuumtimer() const;
  void set_vacuumtimer(float value);
  private:
  float _internal_vacuumtimer() const;
  void _internal_set_vacuumtimer(float value);
  public:

  // float SensorSetPointVacuum = 22;
  void clear_sensorsetpointvacuum();
  float sensorsetpointvacuum() const;
  void set_sensorsetpointvacuum(float value);
  private:
  float _internal_sensorsetpointvacuum() const;
  void _internal_set_sensorsetpointvacuum(float value);
  public:

  // float SensorSetPoint = 23;
  void clear_sensorsetpoint();
  float sensorsetpoint() const;
  void set_sensorsetpoint(float value);
  private:
  float _internal_sensorsetpoint() const;
  void _internal_set_sensorsetpoint(float value);
  public:

  // float SensorThreshold = 24;
  void clear_sensorthreshold();
  float sensorthreshold() const;
  void set_sensorthreshold(float value);
  private:
  float _internal_sensorthreshold() const;
  void _internal_set_sensorthreshold(float value);
  public:

  // float XShift = 25;
  void clear_xshift();
  float xshift() const;
  void set_xshift(float value);
  private:
  float _internal_xshift() const;
  void _internal_set_xshift(float value);
  public:

  // float YShift = 26;
  void clear_yshift();
  float yshift() const;
  void set_yshift(float value);
  private:
  float _internal_yshift() const;
  void _internal_set_yshift(float value);
  public:

  // uint32 MaxIntensitySensor = 27;
  void clear_maxintensitysensor();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxintensitysensor() const;
  void set_maxintensitysensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxintensitysensor() const;
  void _internal_set_maxintensitysensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 MinIntensitySensor = 28;
  void clear_minintensitysensor();
  ::PROTOBUF_NAMESPACE_ID::uint32 minintensitysensor() const;
  void set_minintensitysensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minintensitysensor() const;
  void _internal_set_minintensitysensor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network_messages.MachineConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machineno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 modelcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subversion_;
  float printerunit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 zupperlimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 projectorprotocol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 noofmaskpoints_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxintensity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minintensity_;
  bool needlicense_;
  bool hasdoor_;
  bool haserm_;
  bool buptdownconfig_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gprojectwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gprojectheight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rowid_;
  bool hasplunger_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tdownzhomepos_;
  float vacuumtimer_;
  float sensorsetpointvacuum_;
  float sensorsetpoint_;
  float sensorthreshold_;
  float xshift_;
  float yshift_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxintensitysensor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minintensitysensor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MaterialConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network_messages.MaterialConfig) */ {
 public:
  inline MaterialConfig() : MaterialConfig(nullptr) {}
  virtual ~MaterialConfig();

  MaterialConfig(const MaterialConfig& from);
  MaterialConfig(MaterialConfig&& from) noexcept
    : MaterialConfig() {
    *this = ::std::move(from);
  }

  inline MaterialConfig& operator=(const MaterialConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaterialConfig& operator=(MaterialConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MaterialConfig& default_instance();

  static inline const MaterialConfig* internal_default_instance() {
    return reinterpret_cast<const MaterialConfig*>(
               &_MaterialConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MaterialConfig& a, MaterialConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MaterialConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaterialConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaterialConfig* New() const final {
    return CreateMaybeMessage<MaterialConfig>(nullptr);
  }

  MaterialConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaterialConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MaterialConfig& from);
  void MergeFrom(const MaterialConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaterialConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network_messages.MaterialConfig";
  }
  protected:
  explicit MaterialConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MaterialConfig_PacketType PacketType;
  static constexpr PacketType ZeroPacketCode =
    MaterialConfig_PacketType_ZeroPacketCode;
  static constexpr PacketType Add =
    MaterialConfig_PacketType_Add;
  static constexpr PacketType Edit =
    MaterialConfig_PacketType_Edit;
  static constexpr PacketType Delete =
    MaterialConfig_PacketType_Delete;
  static constexpr PacketType Get =
    MaterialConfig_PacketType_Get;
  static constexpr PacketType GetALL =
    MaterialConfig_PacketType_GetALL;
  static inline bool PacketType_IsValid(int value) {
    return MaterialConfig_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    MaterialConfig_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    MaterialConfig_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    MaterialConfig_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return MaterialConfig_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return MaterialConfig_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return MaterialConfig_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPacketCodeFieldNumber = 1,
    kLayerThicknessFieldNumber = 3,
    kBurnInLayersFieldNumber = 4,
    kBurnInCureTimeFieldNumber = 5,
    kNormalCureTimeFieldNumber = 6,
    kBurnIntensityFieldNumber = 7,
    kIntensityFieldNumber = 8,
    kRowIdFieldNumber = 9,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 packetCode = 1;
  void clear_packetcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode() const;
  void set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetcode() const;
  void _internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 LayerThickness = 3;
  void clear_layerthickness();
  ::PROTOBUF_NAMESPACE_ID::uint32 layerthickness() const;
  void set_layerthickness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layerthickness() const;
  void _internal_set_layerthickness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 BurnInLayers = 4;
  void clear_burninlayers();
  ::PROTOBUF_NAMESPACE_ID::uint32 burninlayers() const;
  void set_burninlayers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_burninlayers() const;
  void _internal_set_burninlayers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float BurnInCureTime = 5;
  void clear_burnincuretime();
  float burnincuretime() const;
  void set_burnincuretime(float value);
  private:
  float _internal_burnincuretime() const;
  void _internal_set_burnincuretime(float value);
  public:

  // float NormalCureTime = 6;
  void clear_normalcuretime();
  float normalcuretime() const;
  void set_normalcuretime(float value);
  private:
  float _internal_normalcuretime() const;
  void _internal_set_normalcuretime(float value);
  public:

  // float BurnIntensity = 7;
  void clear_burnintensity();
  float burnintensity() const;
  void set_burnintensity(float value);
  private:
  float _internal_burnintensity() const;
  void _internal_set_burnintensity(float value);
  public:

  // float Intensity = 8;
  void clear_intensity();
  float intensity() const;
  void set_intensity(float value);
  private:
  float _internal_intensity() const;
  void _internal_set_intensity(float value);
  public:

  // uint32 rowId = 9;
  void clear_rowid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rowid() const;
  void set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rowid() const;
  void _internal_set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network_messages.MaterialConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 layerthickness_;
  ::PROTOBUF_NAMESPACE_ID::uint32 burninlayers_;
  float burnincuretime_;
  float normalcuretime_;
  float burnintensity_;
  float intensity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rowid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MotionConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network_messages.MotionConfig) */ {
 public:
  inline MotionConfig() : MotionConfig(nullptr) {}
  virtual ~MotionConfig();

  MotionConfig(const MotionConfig& from);
  MotionConfig(MotionConfig&& from) noexcept
    : MotionConfig() {
    *this = ::std::move(from);
  }

  inline MotionConfig& operator=(const MotionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MotionConfig& operator=(MotionConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MotionConfig& default_instance();

  static inline const MotionConfig* internal_default_instance() {
    return reinterpret_cast<const MotionConfig*>(
               &_MotionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MotionConfig& a, MotionConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MotionConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MotionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MotionConfig* New() const final {
    return CreateMaybeMessage<MotionConfig>(nullptr);
  }

  MotionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MotionConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MotionConfig& from);
  void MergeFrom(const MotionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network_messages.MotionConfig";
  }
  protected:
  explicit MotionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MotionConfig_PacketType PacketType;
  static constexpr PacketType ZeroPacketCode =
    MotionConfig_PacketType_ZeroPacketCode;
  static constexpr PacketType Add =
    MotionConfig_PacketType_Add;
  static constexpr PacketType Edit =
    MotionConfig_PacketType_Edit;
  static constexpr PacketType Delete =
    MotionConfig_PacketType_Delete;
  static constexpr PacketType Get =
    MotionConfig_PacketType_Get;
  static constexpr PacketType GetALL =
    MotionConfig_PacketType_GetALL;
  static inline bool PacketType_IsValid(int value) {
    return MotionConfig_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    MotionConfig_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    MotionConfig_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    MotionConfig_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return MotionConfig_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return MotionConfig_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return MotionConfig_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLayerZRaiseFieldNumber = 3,
    kLayerZLowerFieldNumber = 4,
    kLayerTiltRaiseFieldNumber = 5,
    kLayerTiltLowerFieldNumber = 6,
    kLayerOverliftFieldNumber = 7,
    kLayerBreatheFieldNumber = 8,
    kLayerSettleFieldNumber = 9,
    kLayerTiltPercentFieldNumber = 10,
    kNameFieldNumber = 2,
    kPacketCodeFieldNumber = 1,
    kCutOffLayersFieldNumber = 11,
    kFinalOverLiftFieldNumber = 12,
    kBaseLayerSettleFieldNumber = 13,
    kRowIdFieldNumber = 14,
  };
  // repeated uint32 Layer_Z_Raise = 3;
  int layer_z_raise_size() const;
  private:
  int _internal_layer_z_raise_size() const;
  public:
  void clear_layer_z_raise();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_z_raise(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_layer_z_raise() const;
  void _internal_add_layer_z_raise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_layer_z_raise();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_z_raise(int index) const;
  void set_layer_z_raise(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_layer_z_raise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      layer_z_raise() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_layer_z_raise();

  // repeated uint32 Layer_Z_Lower = 4;
  int layer_z_lower_size() const;
  private:
  int _internal_layer_z_lower_size() const;
  public:
  void clear_layer_z_lower();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_z_lower(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_layer_z_lower() const;
  void _internal_add_layer_z_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_layer_z_lower();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_z_lower(int index) const;
  void set_layer_z_lower(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_layer_z_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      layer_z_lower() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_layer_z_lower();

  // repeated uint32 Layer_Tilt_Raise = 5;
  int layer_tilt_raise_size() const;
  private:
  int _internal_layer_tilt_raise_size() const;
  public:
  void clear_layer_tilt_raise();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_tilt_raise(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_layer_tilt_raise() const;
  void _internal_add_layer_tilt_raise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_layer_tilt_raise();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_tilt_raise(int index) const;
  void set_layer_tilt_raise(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_layer_tilt_raise(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      layer_tilt_raise() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_layer_tilt_raise();

  // repeated uint32 Layer_Tilt_Lower = 6;
  int layer_tilt_lower_size() const;
  private:
  int _internal_layer_tilt_lower_size() const;
  public:
  void clear_layer_tilt_lower();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_tilt_lower(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_layer_tilt_lower() const;
  void _internal_add_layer_tilt_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_layer_tilt_lower();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_tilt_lower(int index) const;
  void set_layer_tilt_lower(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_layer_tilt_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      layer_tilt_lower() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_layer_tilt_lower();

  // repeated uint32 Layer_Overlift = 7;
  int layer_overlift_size() const;
  private:
  int _internal_layer_overlift_size() const;
  public:
  void clear_layer_overlift();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_overlift(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_layer_overlift() const;
  void _internal_add_layer_overlift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_layer_overlift();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_overlift(int index) const;
  void set_layer_overlift(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_layer_overlift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      layer_overlift() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_layer_overlift();

  // repeated uint32 Layer_Breathe = 8;
  int layer_breathe_size() const;
  private:
  int _internal_layer_breathe_size() const;
  public:
  void clear_layer_breathe();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_breathe(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_layer_breathe() const;
  void _internal_add_layer_breathe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_layer_breathe();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_breathe(int index) const;
  void set_layer_breathe(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_layer_breathe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      layer_breathe() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_layer_breathe();

  // repeated uint32 Layer_Settle = 9;
  int layer_settle_size() const;
  private:
  int _internal_layer_settle_size() const;
  public:
  void clear_layer_settle();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_settle(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_layer_settle() const;
  void _internal_add_layer_settle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_layer_settle();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_settle(int index) const;
  void set_layer_settle(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_layer_settle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      layer_settle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_layer_settle();

  // repeated uint32 Layer_Tilt_Percent = 10;
  int layer_tilt_percent_size() const;
  private:
  int _internal_layer_tilt_percent_size() const;
  public:
  void clear_layer_tilt_percent();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_layer_tilt_percent(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_layer_tilt_percent() const;
  void _internal_add_layer_tilt_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_layer_tilt_percent();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 layer_tilt_percent(int index) const;
  void set_layer_tilt_percent(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_layer_tilt_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      layer_tilt_percent() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_layer_tilt_percent();

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 packetCode = 1;
  void clear_packetcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode() const;
  void set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetcode() const;
  void _internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Cut_Off_Layers = 11;
  void clear_cut_off_layers();
  ::PROTOBUF_NAMESPACE_ID::uint32 cut_off_layers() const;
  void set_cut_off_layers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cut_off_layers() const;
  void _internal_set_cut_off_layers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Final_OverLift = 12;
  void clear_final_overlift();
  ::PROTOBUF_NAMESPACE_ID::uint32 final_overlift() const;
  void set_final_overlift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_final_overlift() const;
  void _internal_set_final_overlift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Base_Layer_settle = 13;
  void clear_base_layer_settle();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_layer_settle() const;
  void set_base_layer_settle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_layer_settle() const;
  void _internal_set_base_layer_settle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rowId = 14;
  void clear_rowid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rowid() const;
  void set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rowid() const;
  void _internal_set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network_messages.MotionConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > layer_z_raise_;
  mutable std::atomic<int> _layer_z_raise_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > layer_z_lower_;
  mutable std::atomic<int> _layer_z_lower_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > layer_tilt_raise_;
  mutable std::atomic<int> _layer_tilt_raise_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > layer_tilt_lower_;
  mutable std::atomic<int> _layer_tilt_lower_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > layer_overlift_;
  mutable std::atomic<int> _layer_overlift_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > layer_breathe_;
  mutable std::atomic<int> _layer_breathe_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > layer_settle_;
  mutable std::atomic<int> _layer_settle_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > layer_tilt_percent_;
  mutable std::atomic<int> _layer_tilt_percent_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cut_off_layers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 final_overlift_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_layer_settle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rowid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Job3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network_messages.Job3D) */ {
 public:
  inline Job3D() : Job3D(nullptr) {}
  virtual ~Job3D();

  Job3D(const Job3D& from);
  Job3D(Job3D&& from) noexcept
    : Job3D() {
    *this = ::std::move(from);
  }

  inline Job3D& operator=(const Job3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job3D& operator=(Job3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Job3D& default_instance();

  static inline const Job3D* internal_default_instance() {
    return reinterpret_cast<const Job3D*>(
               &_Job3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Job3D& a, Job3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Job3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Job3D* New() const final {
    return CreateMaybeMessage<Job3D>(nullptr);
  }

  Job3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Job3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Job3D& from);
  void MergeFrom(const Job3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network_messages.Job3D";
  }
  protected:
  explicit Job3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Job3D_PacketType PacketType;
  static constexpr PacketType ZeroPacketCode =
    Job3D_PacketType_ZeroPacketCode;
  static constexpr PacketType Add =
    Job3D_PacketType_Add;
  static constexpr PacketType Edit =
    Job3D_PacketType_Edit;
  static constexpr PacketType Delete =
    Job3D_PacketType_Delete;
  static constexpr PacketType Get =
    Job3D_PacketType_Get;
  static constexpr PacketType GetALL =
    Job3D_PacketType_GetALL;
  static constexpr PacketType CheckFile =
    Job3D_PacketType_CheckFile;
  static inline bool PacketType_IsValid(int value) {
    return Job3D_PacketType_IsValid(value);
  }
  static constexpr PacketType PacketType_MIN =
    Job3D_PacketType_PacketType_MIN;
  static constexpr PacketType PacketType_MAX =
    Job3D_PacketType_PacketType_MAX;
  static constexpr int PacketType_ARRAYSIZE =
    Job3D_PacketType_PacketType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PacketType_descriptor() {
    return Job3D_PacketType_descriptor();
  }
  template<typename T>
  static inline const std::string& PacketType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PacketType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PacketType_Name.");
    return Job3D_PacketType_Name(enum_t_value);
  }
  static inline bool PacketType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PacketType* value) {
    return Job3D_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileBytesFieldNumber = 5,
    kNameFieldNumber = 2,
    kSizeFieldNumber = 3,
    kPacketCodeFieldNumber = 1,
    kLastPacketFieldNumber = 4,
    kMd5FieldNumber = 7,
    kRowIdFieldNumber = 6,
  };
  // repeated bytes fileBytes = 5;
  int filebytes_size() const;
  private:
  int _internal_filebytes_size() const;
  public:
  void clear_filebytes();
  const std::string& filebytes(int index) const;
  std::string* mutable_filebytes(int index);
  void set_filebytes(int index, const std::string& value);
  void set_filebytes(int index, std::string&& value);
  void set_filebytes(int index, const char* value);
  void set_filebytes(int index, const void* value, size_t size);
  std::string* add_filebytes();
  void add_filebytes(const std::string& value);
  void add_filebytes(std::string&& value);
  void add_filebytes(const char* value);
  void add_filebytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filebytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filebytes();
  private:
  const std::string& _internal_filebytes(int index) const;
  std::string* _internal_add_filebytes();
  public:

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 Size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 packetCode = 1;
  void clear_packetcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode() const;
  void set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetcode() const;
  void _internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool lastPacket = 4;
  void clear_lastpacket();
  bool lastpacket() const;
  void set_lastpacket(bool value);
  private:
  bool _internal_lastpacket() const;
  void _internal_set_lastpacket(bool value);
  public:

  // bool Md5 = 7;
  void clear_md5();
  bool md5() const;
  void set_md5(bool value);
  private:
  bool _internal_md5() const;
  void _internal_set_md5(bool value);
  public:

  // uint32 rowId = 6;
  void clear_rowid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rowid() const;
  void set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rowid() const;
  void _internal_set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network_messages.Job3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filebytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetcode_;
  bool lastpacket_;
  bool md5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rowid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetServerCommands

// uint32 packetCode = 20;
inline void NetServerCommands::clear_packetcode() {
  packetcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_packetcode() const {
  return packetcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::packetcode() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.packetCode)
  return _internal_packetcode();
}
inline void NetServerCommands::_internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetcode_ = value;
}
inline void NetServerCommands::set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetcode(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.packetCode)
}

// uint32 iCalibrState = 1;
inline void NetServerCommands::clear_icalibrstate() {
  icalibrstate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_icalibrstate() const {
  return icalibrstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::icalibrstate() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iCalibrState)
  return _internal_icalibrstate();
}
inline void NetServerCommands::_internal_set_icalibrstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  icalibrstate_ = value;
}
inline void NetServerCommands::set_icalibrstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_icalibrstate(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iCalibrState)
}

// uint32 iGoPos = 2;
inline void NetServerCommands::clear_igopos() {
  igopos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_igopos() const {
  return igopos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::igopos() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iGoPos)
  return _internal_igopos();
}
inline void NetServerCommands::_internal_set_igopos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  igopos_ = value;
}
inline void NetServerCommands::set_igopos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_igopos(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iGoPos)
}

// float fMaterialLevelmm = 18;
inline void NetServerCommands::clear_fmateriallevelmm() {
  fmateriallevelmm_ = 0;
}
inline float NetServerCommands::_internal_fmateriallevelmm() const {
  return fmateriallevelmm_;
}
inline float NetServerCommands::fmateriallevelmm() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.fMaterialLevelmm)
  return _internal_fmateriallevelmm();
}
inline void NetServerCommands::_internal_set_fmateriallevelmm(float value) {
  
  fmateriallevelmm_ = value;
}
inline void NetServerCommands::set_fmateriallevelmm(float value) {
  _internal_set_fmateriallevelmm(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.fMaterialLevelmm)
}

// float fFillVacuumSec = 19;
inline void NetServerCommands::clear_ffillvacuumsec() {
  ffillvacuumsec_ = 0;
}
inline float NetServerCommands::_internal_ffillvacuumsec() const {
  return ffillvacuumsec_;
}
inline float NetServerCommands::ffillvacuumsec() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.fFillVacuumSec)
  return _internal_ffillvacuumsec();
}
inline void NetServerCommands::_internal_set_ffillvacuumsec(float value) {
  
  ffillvacuumsec_ = value;
}
inline void NetServerCommands::set_ffillvacuumsec(float value) {
  _internal_set_ffillvacuumsec(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.fFillVacuumSec)
}

// uint32 iPrintState = 3;
inline void NetServerCommands::clear_iprintstate() {
  iprintstate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_iprintstate() const {
  return iprintstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::iprintstate() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iPrintState)
  return _internal_iprintstate();
}
inline void NetServerCommands::_internal_set_iprintstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iprintstate_ = value;
}
inline void NetServerCommands::set_iprintstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iprintstate(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iPrintState)
}

// uint32 iMachineStatus = 4;
inline void NetServerCommands::clear_imachinestatus() {
  imachinestatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_imachinestatus() const {
  return imachinestatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::imachinestatus() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iMachineStatus)
  return _internal_imachinestatus();
}
inline void NetServerCommands::_internal_set_imachinestatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  imachinestatus_ = value;
}
inline void NetServerCommands::set_imachinestatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_imachinestatus(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iMachineStatus)
}

// uint32 getstatus = 5;
inline void NetServerCommands::clear_getstatus() {
  getstatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_getstatus() const {
  return getstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::getstatus() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.getstatus)
  return _internal_getstatus();
}
inline void NetServerCommands::_internal_set_getstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  getstatus_ = value;
}
inline void NetServerCommands::set_getstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_getstatus(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.getstatus)
}

// uint32 materialId = 6;
inline void NetServerCommands::clear_materialid() {
  materialid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_materialid() const {
  return materialid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::materialid() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.materialId)
  return _internal_materialid();
}
inline void NetServerCommands::_internal_set_materialid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  materialid_ = value;
}
inline void NetServerCommands::set_materialid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_materialid(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.materialId)
}

// uint32 motionId = 7;
inline void NetServerCommands::clear_motionid() {
  motionid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_motionid() const {
  return motionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::motionid() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.motionId)
  return _internal_motionid();
}
inline void NetServerCommands::_internal_set_motionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  motionid_ = value;
}
inline void NetServerCommands::set_motionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_motionid(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.motionId)
}

// uint32 jobId = 23;
inline void NetServerCommands::clear_jobid() {
  jobid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_jobid() const {
  return jobid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::jobid() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.jobId)
  return _internal_jobid();
}
inline void NetServerCommands::_internal_set_jobid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  jobid_ = value;
}
inline void NetServerCommands::set_jobid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_jobid(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.jobId)
}

// uint32 iManualMV = 8;
inline void NetServerCommands::clear_imanualmv() {
  imanualmv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_imanualmv() const {
  return imanualmv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::imanualmv() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iManualMV)
  return _internal_imanualmv();
}
inline void NetServerCommands::_internal_set_imanualmv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  imanualmv_ = value;
}
inline void NetServerCommands::set_imanualmv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_imanualmv(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iManualMV)
}

// uint32 iMatPat = 9;
inline void NetServerCommands::clear_imatpat() {
  imatpat_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_imatpat() const {
  return imatpat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::imatpat() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iMatPat)
  return _internal_imatpat();
}
inline void NetServerCommands::_internal_set_imatpat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  imatpat_ = value;
}
inline void NetServerCommands::set_imatpat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_imatpat(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iMatPat)
}

// uint32 iLicenseStatus = 10;
inline void NetServerCommands::clear_ilicensestatus() {
  ilicensestatus_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_ilicensestatus() const {
  return ilicensestatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::ilicensestatus() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iLicenseStatus)
  return _internal_ilicensestatus();
}
inline void NetServerCommands::_internal_set_ilicensestatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ilicensestatus_ = value;
}
inline void NetServerCommands::set_ilicensestatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ilicensestatus(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iLicenseStatus)
}

// uint32 iRenewLicense = 11;
inline void NetServerCommands::clear_irenewlicense() {
  irenewlicense_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::_internal_irenewlicense() const {
  return irenewlicense_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetServerCommands::irenewlicense() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iRenewLicense)
  return _internal_irenewlicense();
}
inline void NetServerCommands::_internal_set_irenewlicense(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  irenewlicense_ = value;
}
inline void NetServerCommands::set_irenewlicense(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_irenewlicense(value);
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iRenewLicense)
}

// repeated bytes iRequestedCode = 12;
inline int NetServerCommands::_internal_irequestedcode_size() const {
  return irequestedcode_.size();
}
inline int NetServerCommands::irequestedcode_size() const {
  return _internal_irequestedcode_size();
}
inline void NetServerCommands::clear_irequestedcode() {
  irequestedcode_.Clear();
}
inline std::string* NetServerCommands::add_irequestedcode() {
  // @@protoc_insertion_point(field_add_mutable:network_messages.NetServerCommands.iRequestedCode)
  return _internal_add_irequestedcode();
}
inline const std::string& NetServerCommands::_internal_irequestedcode(int index) const {
  return irequestedcode_.Get(index);
}
inline const std::string& NetServerCommands::irequestedcode(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iRequestedCode)
  return _internal_irequestedcode(index);
}
inline std::string* NetServerCommands::mutable_irequestedcode(int index) {
  // @@protoc_insertion_point(field_mutable:network_messages.NetServerCommands.iRequestedCode)
  return irequestedcode_.Mutable(index);
}
inline void NetServerCommands::set_irequestedcode(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iRequestedCode)
  irequestedcode_.Mutable(index)->assign(value);
}
inline void NetServerCommands::set_irequestedcode(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iRequestedCode)
  irequestedcode_.Mutable(index)->assign(std::move(value));
}
inline void NetServerCommands::set_irequestedcode(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  irequestedcode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network_messages.NetServerCommands.iRequestedCode)
}
inline void NetServerCommands::set_irequestedcode(int index, const void* value, size_t size) {
  irequestedcode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network_messages.NetServerCommands.iRequestedCode)
}
inline std::string* NetServerCommands::_internal_add_irequestedcode() {
  return irequestedcode_.Add();
}
inline void NetServerCommands::add_irequestedcode(const std::string& value) {
  irequestedcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network_messages.NetServerCommands.iRequestedCode)
}
inline void NetServerCommands::add_irequestedcode(std::string&& value) {
  irequestedcode_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network_messages.NetServerCommands.iRequestedCode)
}
inline void NetServerCommands::add_irequestedcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  irequestedcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network_messages.NetServerCommands.iRequestedCode)
}
inline void NetServerCommands::add_irequestedcode(const void* value, size_t size) {
  irequestedcode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network_messages.NetServerCommands.iRequestedCode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetServerCommands::irequestedcode() const {
  // @@protoc_insertion_point(field_list:network_messages.NetServerCommands.iRequestedCode)
  return irequestedcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetServerCommands::mutable_irequestedcode() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.NetServerCommands.iRequestedCode)
  return &irequestedcode_;
}

// repeated bytes iLicenseKey = 13;
inline int NetServerCommands::_internal_ilicensekey_size() const {
  return ilicensekey_.size();
}
inline int NetServerCommands::ilicensekey_size() const {
  return _internal_ilicensekey_size();
}
inline void NetServerCommands::clear_ilicensekey() {
  ilicensekey_.Clear();
}
inline std::string* NetServerCommands::add_ilicensekey() {
  // @@protoc_insertion_point(field_add_mutable:network_messages.NetServerCommands.iLicenseKey)
  return _internal_add_ilicensekey();
}
inline const std::string& NetServerCommands::_internal_ilicensekey(int index) const {
  return ilicensekey_.Get(index);
}
inline const std::string& NetServerCommands::ilicensekey(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.iLicenseKey)
  return _internal_ilicensekey(index);
}
inline std::string* NetServerCommands::mutable_ilicensekey(int index) {
  // @@protoc_insertion_point(field_mutable:network_messages.NetServerCommands.iLicenseKey)
  return ilicensekey_.Mutable(index);
}
inline void NetServerCommands::set_ilicensekey(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iLicenseKey)
  ilicensekey_.Mutable(index)->assign(value);
}
inline void NetServerCommands::set_ilicensekey(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:network_messages.NetServerCommands.iLicenseKey)
  ilicensekey_.Mutable(index)->assign(std::move(value));
}
inline void NetServerCommands::set_ilicensekey(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ilicensekey_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network_messages.NetServerCommands.iLicenseKey)
}
inline void NetServerCommands::set_ilicensekey(int index, const void* value, size_t size) {
  ilicensekey_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network_messages.NetServerCommands.iLicenseKey)
}
inline std::string* NetServerCommands::_internal_add_ilicensekey() {
  return ilicensekey_.Add();
}
inline void NetServerCommands::add_ilicensekey(const std::string& value) {
  ilicensekey_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network_messages.NetServerCommands.iLicenseKey)
}
inline void NetServerCommands::add_ilicensekey(std::string&& value) {
  ilicensekey_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network_messages.NetServerCommands.iLicenseKey)
}
inline void NetServerCommands::add_ilicensekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ilicensekey_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network_messages.NetServerCommands.iLicenseKey)
}
inline void NetServerCommands::add_ilicensekey(const void* value, size_t size) {
  ilicensekey_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network_messages.NetServerCommands.iLicenseKey)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetServerCommands::ilicensekey() const {
  // @@protoc_insertion_point(field_list:network_messages.NetServerCommands.iLicenseKey)
  return ilicensekey_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetServerCommands::mutable_ilicensekey() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.NetServerCommands.iLicenseKey)
  return &ilicensekey_;
}

// .network_messages.MachineConfig machineConf = 14;
inline bool NetServerCommands::_internal_has_machineconf() const {
  return this != internal_default_instance() && machineconf_ != nullptr;
}
inline bool NetServerCommands::has_machineconf() const {
  return _internal_has_machineconf();
}
inline void NetServerCommands::clear_machineconf() {
  if (GetArena() == nullptr && machineconf_ != nullptr) {
    delete machineconf_;
  }
  machineconf_ = nullptr;
}
inline const ::network_messages::MachineConfig& NetServerCommands::_internal_machineconf() const {
  const ::network_messages::MachineConfig* p = machineconf_;
  return p != nullptr ? *p : reinterpret_cast<const ::network_messages::MachineConfig&>(
      ::network_messages::_MachineConfig_default_instance_);
}
inline const ::network_messages::MachineConfig& NetServerCommands::machineconf() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.machineConf)
  return _internal_machineconf();
}
inline void NetServerCommands::unsafe_arena_set_allocated_machineconf(
    ::network_messages::MachineConfig* machineconf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(machineconf_);
  }
  machineconf_ = machineconf;
  if (machineconf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network_messages.NetServerCommands.machineConf)
}
inline ::network_messages::MachineConfig* NetServerCommands::release_machineconf() {
  
  ::network_messages::MachineConfig* temp = machineconf_;
  machineconf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::network_messages::MachineConfig* NetServerCommands::unsafe_arena_release_machineconf() {
  // @@protoc_insertion_point(field_release:network_messages.NetServerCommands.machineConf)
  
  ::network_messages::MachineConfig* temp = machineconf_;
  machineconf_ = nullptr;
  return temp;
}
inline ::network_messages::MachineConfig* NetServerCommands::_internal_mutable_machineconf() {
  
  if (machineconf_ == nullptr) {
    auto* p = CreateMaybeMessage<::network_messages::MachineConfig>(GetArena());
    machineconf_ = p;
  }
  return machineconf_;
}
inline ::network_messages::MachineConfig* NetServerCommands::mutable_machineconf() {
  // @@protoc_insertion_point(field_mutable:network_messages.NetServerCommands.machineConf)
  return _internal_mutable_machineconf();
}
inline void NetServerCommands::set_allocated_machineconf(::network_messages::MachineConfig* machineconf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete machineconf_;
  }
  if (machineconf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(machineconf);
    if (message_arena != submessage_arena) {
      machineconf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machineconf, submessage_arena);
    }
    
  } else {
    
  }
  machineconf_ = machineconf;
  // @@protoc_insertion_point(field_set_allocated:network_messages.NetServerCommands.machineConf)
}

// .network_messages.MaterialConfig materialConfig = 15;
inline bool NetServerCommands::_internal_has_materialconfig() const {
  return this != internal_default_instance() && materialconfig_ != nullptr;
}
inline bool NetServerCommands::has_materialconfig() const {
  return _internal_has_materialconfig();
}
inline void NetServerCommands::clear_materialconfig() {
  if (GetArena() == nullptr && materialconfig_ != nullptr) {
    delete materialconfig_;
  }
  materialconfig_ = nullptr;
}
inline const ::network_messages::MaterialConfig& NetServerCommands::_internal_materialconfig() const {
  const ::network_messages::MaterialConfig* p = materialconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::network_messages::MaterialConfig&>(
      ::network_messages::_MaterialConfig_default_instance_);
}
inline const ::network_messages::MaterialConfig& NetServerCommands::materialconfig() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.materialConfig)
  return _internal_materialconfig();
}
inline void NetServerCommands::unsafe_arena_set_allocated_materialconfig(
    ::network_messages::MaterialConfig* materialconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(materialconfig_);
  }
  materialconfig_ = materialconfig;
  if (materialconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network_messages.NetServerCommands.materialConfig)
}
inline ::network_messages::MaterialConfig* NetServerCommands::release_materialconfig() {
  
  ::network_messages::MaterialConfig* temp = materialconfig_;
  materialconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::network_messages::MaterialConfig* NetServerCommands::unsafe_arena_release_materialconfig() {
  // @@protoc_insertion_point(field_release:network_messages.NetServerCommands.materialConfig)
  
  ::network_messages::MaterialConfig* temp = materialconfig_;
  materialconfig_ = nullptr;
  return temp;
}
inline ::network_messages::MaterialConfig* NetServerCommands::_internal_mutable_materialconfig() {
  
  if (materialconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::network_messages::MaterialConfig>(GetArena());
    materialconfig_ = p;
  }
  return materialconfig_;
}
inline ::network_messages::MaterialConfig* NetServerCommands::mutable_materialconfig() {
  // @@protoc_insertion_point(field_mutable:network_messages.NetServerCommands.materialConfig)
  return _internal_mutable_materialconfig();
}
inline void NetServerCommands::set_allocated_materialconfig(::network_messages::MaterialConfig* materialconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete materialconfig_;
  }
  if (materialconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(materialconfig);
    if (message_arena != submessage_arena) {
      materialconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, materialconfig, submessage_arena);
    }
    
  } else {
    
  }
  materialconfig_ = materialconfig;
  // @@protoc_insertion_point(field_set_allocated:network_messages.NetServerCommands.materialConfig)
}

// .network_messages.MotionConfig motionConfig = 16;
inline bool NetServerCommands::_internal_has_motionconfig() const {
  return this != internal_default_instance() && motionconfig_ != nullptr;
}
inline bool NetServerCommands::has_motionconfig() const {
  return _internal_has_motionconfig();
}
inline void NetServerCommands::clear_motionconfig() {
  if (GetArena() == nullptr && motionconfig_ != nullptr) {
    delete motionconfig_;
  }
  motionconfig_ = nullptr;
}
inline const ::network_messages::MotionConfig& NetServerCommands::_internal_motionconfig() const {
  const ::network_messages::MotionConfig* p = motionconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::network_messages::MotionConfig&>(
      ::network_messages::_MotionConfig_default_instance_);
}
inline const ::network_messages::MotionConfig& NetServerCommands::motionconfig() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.motionConfig)
  return _internal_motionconfig();
}
inline void NetServerCommands::unsafe_arena_set_allocated_motionconfig(
    ::network_messages::MotionConfig* motionconfig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motionconfig_);
  }
  motionconfig_ = motionconfig;
  if (motionconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network_messages.NetServerCommands.motionConfig)
}
inline ::network_messages::MotionConfig* NetServerCommands::release_motionconfig() {
  
  ::network_messages::MotionConfig* temp = motionconfig_;
  motionconfig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::network_messages::MotionConfig* NetServerCommands::unsafe_arena_release_motionconfig() {
  // @@protoc_insertion_point(field_release:network_messages.NetServerCommands.motionConfig)
  
  ::network_messages::MotionConfig* temp = motionconfig_;
  motionconfig_ = nullptr;
  return temp;
}
inline ::network_messages::MotionConfig* NetServerCommands::_internal_mutable_motionconfig() {
  
  if (motionconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::network_messages::MotionConfig>(GetArena());
    motionconfig_ = p;
  }
  return motionconfig_;
}
inline ::network_messages::MotionConfig* NetServerCommands::mutable_motionconfig() {
  // @@protoc_insertion_point(field_mutable:network_messages.NetServerCommands.motionConfig)
  return _internal_mutable_motionconfig();
}
inline void NetServerCommands::set_allocated_motionconfig(::network_messages::MotionConfig* motionconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete motionconfig_;
  }
  if (motionconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(motionconfig);
    if (message_arena != submessage_arena) {
      motionconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motionconfig, submessage_arena);
    }
    
  } else {
    
  }
  motionconfig_ = motionconfig;
  // @@protoc_insertion_point(field_set_allocated:network_messages.NetServerCommands.motionConfig)
}

// .network_messages.Job3D job3D = 17;
inline bool NetServerCommands::_internal_has_job3d() const {
  return this != internal_default_instance() && job3d_ != nullptr;
}
inline bool NetServerCommands::has_job3d() const {
  return _internal_has_job3d();
}
inline void NetServerCommands::clear_job3d() {
  if (GetArena() == nullptr && job3d_ != nullptr) {
    delete job3d_;
  }
  job3d_ = nullptr;
}
inline const ::network_messages::Job3D& NetServerCommands::_internal_job3d() const {
  const ::network_messages::Job3D* p = job3d_;
  return p != nullptr ? *p : reinterpret_cast<const ::network_messages::Job3D&>(
      ::network_messages::_Job3D_default_instance_);
}
inline const ::network_messages::Job3D& NetServerCommands::job3d() const {
  // @@protoc_insertion_point(field_get:network_messages.NetServerCommands.job3D)
  return _internal_job3d();
}
inline void NetServerCommands::unsafe_arena_set_allocated_job3d(
    ::network_messages::Job3D* job3d) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(job3d_);
  }
  job3d_ = job3d;
  if (job3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:network_messages.NetServerCommands.job3D)
}
inline ::network_messages::Job3D* NetServerCommands::release_job3d() {
  
  ::network_messages::Job3D* temp = job3d_;
  job3d_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::network_messages::Job3D* NetServerCommands::unsafe_arena_release_job3d() {
  // @@protoc_insertion_point(field_release:network_messages.NetServerCommands.job3D)
  
  ::network_messages::Job3D* temp = job3d_;
  job3d_ = nullptr;
  return temp;
}
inline ::network_messages::Job3D* NetServerCommands::_internal_mutable_job3d() {
  
  if (job3d_ == nullptr) {
    auto* p = CreateMaybeMessage<::network_messages::Job3D>(GetArena());
    job3d_ = p;
  }
  return job3d_;
}
inline ::network_messages::Job3D* NetServerCommands::mutable_job3d() {
  // @@protoc_insertion_point(field_mutable:network_messages.NetServerCommands.job3D)
  return _internal_mutable_job3d();
}
inline void NetServerCommands::set_allocated_job3d(::network_messages::Job3D* job3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete job3d_;
  }
  if (job3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(job3d);
    if (message_arena != submessage_arena) {
      job3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job3d, submessage_arena);
    }
    
  } else {
    
  }
  job3d_ = job3d;
  // @@protoc_insertion_point(field_set_allocated:network_messages.NetServerCommands.job3D)
}

// -------------------------------------------------------------------

// NetClientRes

// uint32 packetCode = 1;
inline void NetClientRes::clear_packetcode() {
  packetcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetClientRes::_internal_packetcode() const {
  return packetcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetClientRes::packetcode() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.packetCode)
  return _internal_packetcode();
}
inline void NetClientRes::_internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetcode_ = value;
}
inline void NetClientRes::set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetcode(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.packetCode)
}

// repeated .network_messages.MachineConfig confs = 2;
inline int NetClientRes::_internal_confs_size() const {
  return confs_.size();
}
inline int NetClientRes::confs_size() const {
  return _internal_confs_size();
}
inline void NetClientRes::clear_confs() {
  confs_.Clear();
}
inline ::network_messages::MachineConfig* NetClientRes::mutable_confs(int index) {
  // @@protoc_insertion_point(field_mutable:network_messages.NetClientRes.confs)
  return confs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MachineConfig >*
NetClientRes::mutable_confs() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.NetClientRes.confs)
  return &confs_;
}
inline const ::network_messages::MachineConfig& NetClientRes::_internal_confs(int index) const {
  return confs_.Get(index);
}
inline const ::network_messages::MachineConfig& NetClientRes::confs(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.confs)
  return _internal_confs(index);
}
inline ::network_messages::MachineConfig* NetClientRes::_internal_add_confs() {
  return confs_.Add();
}
inline ::network_messages::MachineConfig* NetClientRes::add_confs() {
  // @@protoc_insertion_point(field_add:network_messages.NetClientRes.confs)
  return _internal_add_confs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MachineConfig >&
NetClientRes::confs() const {
  // @@protoc_insertion_point(field_list:network_messages.NetClientRes.confs)
  return confs_;
}

// repeated .network_messages.MaterialConfig materials = 3;
inline int NetClientRes::_internal_materials_size() const {
  return materials_.size();
}
inline int NetClientRes::materials_size() const {
  return _internal_materials_size();
}
inline void NetClientRes::clear_materials() {
  materials_.Clear();
}
inline ::network_messages::MaterialConfig* NetClientRes::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:network_messages.NetClientRes.materials)
  return materials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MaterialConfig >*
NetClientRes::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.NetClientRes.materials)
  return &materials_;
}
inline const ::network_messages::MaterialConfig& NetClientRes::_internal_materials(int index) const {
  return materials_.Get(index);
}
inline const ::network_messages::MaterialConfig& NetClientRes::materials(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.materials)
  return _internal_materials(index);
}
inline ::network_messages::MaterialConfig* NetClientRes::_internal_add_materials() {
  return materials_.Add();
}
inline ::network_messages::MaterialConfig* NetClientRes::add_materials() {
  // @@protoc_insertion_point(field_add:network_messages.NetClientRes.materials)
  return _internal_add_materials();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MaterialConfig >&
NetClientRes::materials() const {
  // @@protoc_insertion_point(field_list:network_messages.NetClientRes.materials)
  return materials_;
}

// repeated .network_messages.MotionConfig motions = 4;
inline int NetClientRes::_internal_motions_size() const {
  return motions_.size();
}
inline int NetClientRes::motions_size() const {
  return _internal_motions_size();
}
inline void NetClientRes::clear_motions() {
  motions_.Clear();
}
inline ::network_messages::MotionConfig* NetClientRes::mutable_motions(int index) {
  // @@protoc_insertion_point(field_mutable:network_messages.NetClientRes.motions)
  return motions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MotionConfig >*
NetClientRes::mutable_motions() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.NetClientRes.motions)
  return &motions_;
}
inline const ::network_messages::MotionConfig& NetClientRes::_internal_motions(int index) const {
  return motions_.Get(index);
}
inline const ::network_messages::MotionConfig& NetClientRes::motions(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.motions)
  return _internal_motions(index);
}
inline ::network_messages::MotionConfig* NetClientRes::_internal_add_motions() {
  return motions_.Add();
}
inline ::network_messages::MotionConfig* NetClientRes::add_motions() {
  // @@protoc_insertion_point(field_add:network_messages.NetClientRes.motions)
  return _internal_add_motions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::MotionConfig >&
NetClientRes::motions() const {
  // @@protoc_insertion_point(field_list:network_messages.NetClientRes.motions)
  return motions_;
}

// repeated .network_messages.Job3D jobs = 5;
inline int NetClientRes::_internal_jobs_size() const {
  return jobs_.size();
}
inline int NetClientRes::jobs_size() const {
  return _internal_jobs_size();
}
inline void NetClientRes::clear_jobs() {
  jobs_.Clear();
}
inline ::network_messages::Job3D* NetClientRes::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:network_messages.NetClientRes.jobs)
  return jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::Job3D >*
NetClientRes::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.NetClientRes.jobs)
  return &jobs_;
}
inline const ::network_messages::Job3D& NetClientRes::_internal_jobs(int index) const {
  return jobs_.Get(index);
}
inline const ::network_messages::Job3D& NetClientRes::jobs(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.jobs)
  return _internal_jobs(index);
}
inline ::network_messages::Job3D* NetClientRes::_internal_add_jobs() {
  return jobs_.Add();
}
inline ::network_messages::Job3D* NetClientRes::add_jobs() {
  // @@protoc_insertion_point(field_add:network_messages.NetClientRes.jobs)
  return _internal_add_jobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network_messages::Job3D >&
NetClientRes::jobs() const {
  // @@protoc_insertion_point(field_list:network_messages.NetClientRes.jobs)
  return jobs_;
}

// string errorMesg = 6;
inline void NetClientRes::clear_errormesg() {
  errormesg_.ClearToEmpty();
}
inline const std::string& NetClientRes::errormesg() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.errorMesg)
  return _internal_errormesg();
}
inline void NetClientRes::set_errormesg(const std::string& value) {
  _internal_set_errormesg(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.errorMesg)
}
inline std::string* NetClientRes::mutable_errormesg() {
  // @@protoc_insertion_point(field_mutable:network_messages.NetClientRes.errorMesg)
  return _internal_mutable_errormesg();
}
inline const std::string& NetClientRes::_internal_errormesg() const {
  return errormesg_.Get();
}
inline void NetClientRes::_internal_set_errormesg(const std::string& value) {
  
  errormesg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetClientRes::set_errormesg(std::string&& value) {
  
  errormesg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network_messages.NetClientRes.errorMesg)
}
inline void NetClientRes::set_errormesg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormesg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network_messages.NetClientRes.errorMesg)
}
inline void NetClientRes::set_errormesg(const char* value,
    size_t size) {
  
  errormesg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network_messages.NetClientRes.errorMesg)
}
inline std::string* NetClientRes::_internal_mutable_errormesg() {
  
  return errormesg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetClientRes::release_errormesg() {
  // @@protoc_insertion_point(field_release:network_messages.NetClientRes.errorMesg)
  return errormesg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetClientRes::set_allocated_errormesg(std::string* errormesg) {
  if (errormesg != nullptr) {
    
  } else {
    
  }
  errormesg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormesg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network_messages.NetClientRes.errorMesg)
}

// uint32 progress = 7;
inline void NetClientRes::clear_progress() {
  progress_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetClientRes::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetClientRes::progress() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.progress)
  return _internal_progress();
}
inline void NetClientRes::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  progress_ = value;
}
inline void NetClientRes::set_progress(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.progress)
}

// uint64 size = 8;
inline void NetClientRes::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetClientRes::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetClientRes::size() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.size)
  return _internal_size();
}
inline void NetClientRes::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void NetClientRes::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.size)
}

// uint32 currentSlice = 9;
inline void NetClientRes::clear_currentslice() {
  currentslice_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetClientRes::_internal_currentslice() const {
  return currentslice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetClientRes::currentslice() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.currentSlice)
  return _internal_currentslice();
}
inline void NetClientRes::_internal_set_currentslice(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  currentslice_ = value;
}
inline void NetClientRes::set_currentslice(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_currentslice(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.currentSlice)
}

// uint32 totalSlice = 10;
inline void NetClientRes::clear_totalslice() {
  totalslice_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetClientRes::_internal_totalslice() const {
  return totalslice_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetClientRes::totalslice() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.totalSlice)
  return _internal_totalslice();
}
inline void NetClientRes::_internal_set_totalslice(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalslice_ = value;
}
inline void NetClientRes::set_totalslice(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalslice(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.totalSlice)
}

// uint64 remaining_time = 12;
inline void NetClientRes::clear_remaining_time() {
  remaining_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetClientRes::_internal_remaining_time() const {
  return remaining_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetClientRes::remaining_time() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.remaining_time)
  return _internal_remaining_time();
}
inline void NetClientRes::_internal_set_remaining_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remaining_time_ = value;
}
inline void NetClientRes::set_remaining_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remaining_time(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.remaining_time)
}

// float sensorVal = 13;
inline void NetClientRes::clear_sensorval() {
  sensorval_ = 0;
}
inline float NetClientRes::_internal_sensorval() const {
  return sensorval_;
}
inline float NetClientRes::sensorval() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.sensorVal)
  return _internal_sensorval();
}
inline void NetClientRes::_internal_set_sensorval(float value) {
  
  sensorval_ = value;
}
inline void NetClientRes::set_sensorval(float value) {
  _internal_set_sensorval(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.sensorVal)
}

// repeated bytes fileBytes = 11;
inline int NetClientRes::_internal_filebytes_size() const {
  return filebytes_.size();
}
inline int NetClientRes::filebytes_size() const {
  return _internal_filebytes_size();
}
inline void NetClientRes::clear_filebytes() {
  filebytes_.Clear();
}
inline std::string* NetClientRes::add_filebytes() {
  // @@protoc_insertion_point(field_add_mutable:network_messages.NetClientRes.fileBytes)
  return _internal_add_filebytes();
}
inline const std::string& NetClientRes::_internal_filebytes(int index) const {
  return filebytes_.Get(index);
}
inline const std::string& NetClientRes::filebytes(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.fileBytes)
  return _internal_filebytes(index);
}
inline std::string* NetClientRes::mutable_filebytes(int index) {
  // @@protoc_insertion_point(field_mutable:network_messages.NetClientRes.fileBytes)
  return filebytes_.Mutable(index);
}
inline void NetClientRes::set_filebytes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.fileBytes)
  filebytes_.Mutable(index)->assign(value);
}
inline void NetClientRes::set_filebytes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.fileBytes)
  filebytes_.Mutable(index)->assign(std::move(value));
}
inline void NetClientRes::set_filebytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filebytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network_messages.NetClientRes.fileBytes)
}
inline void NetClientRes::set_filebytes(int index, const void* value, size_t size) {
  filebytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network_messages.NetClientRes.fileBytes)
}
inline std::string* NetClientRes::_internal_add_filebytes() {
  return filebytes_.Add();
}
inline void NetClientRes::add_filebytes(const std::string& value) {
  filebytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network_messages.NetClientRes.fileBytes)
}
inline void NetClientRes::add_filebytes(std::string&& value) {
  filebytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network_messages.NetClientRes.fileBytes)
}
inline void NetClientRes::add_filebytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filebytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network_messages.NetClientRes.fileBytes)
}
inline void NetClientRes::add_filebytes(const void* value, size_t size) {
  filebytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network_messages.NetClientRes.fileBytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetClientRes::filebytes() const {
  // @@protoc_insertion_point(field_list:network_messages.NetClientRes.fileBytes)
  return filebytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetClientRes::mutable_filebytes() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.NetClientRes.fileBytes)
  return &filebytes_;
}

// bytes Md5 = 14;
inline void NetClientRes::clear_md5() {
  md5_.ClearToEmpty();
}
inline const std::string& NetClientRes::md5() const {
  // @@protoc_insertion_point(field_get:network_messages.NetClientRes.Md5)
  return _internal_md5();
}
inline void NetClientRes::set_md5(const std::string& value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:network_messages.NetClientRes.Md5)
}
inline std::string* NetClientRes::mutable_md5() {
  // @@protoc_insertion_point(field_mutable:network_messages.NetClientRes.Md5)
  return _internal_mutable_md5();
}
inline const std::string& NetClientRes::_internal_md5() const {
  return md5_.Get();
}
inline void NetClientRes::_internal_set_md5(const std::string& value) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetClientRes::set_md5(std::string&& value) {
  
  md5_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network_messages.NetClientRes.Md5)
}
inline void NetClientRes::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network_messages.NetClientRes.Md5)
}
inline void NetClientRes::set_md5(const void* value,
    size_t size) {
  
  md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network_messages.NetClientRes.Md5)
}
inline std::string* NetClientRes::_internal_mutable_md5() {
  
  return md5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetClientRes::release_md5() {
  // @@protoc_insertion_point(field_release:network_messages.NetClientRes.Md5)
  return md5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetClientRes::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  md5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network_messages.NetClientRes.Md5)
}

// -------------------------------------------------------------------

// PrintProgress

// -------------------------------------------------------------------

// MachineConfig

// uint32 packetCode = 1;
inline void MachineConfig::clear_packetcode() {
  packetcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_packetcode() const {
  return packetcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::packetcode() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.packetCode)
  return _internal_packetcode();
}
inline void MachineConfig::_internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetcode_ = value;
}
inline void MachineConfig::set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetcode(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.packetCode)
}

// uint32 ModelCode = 2;
inline void MachineConfig::clear_modelcode() {
  modelcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_modelcode() const {
  return modelcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::modelcode() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.ModelCode)
  return _internal_modelcode();
}
inline void MachineConfig::_internal_set_modelcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  modelcode_ = value;
}
inline void MachineConfig::set_modelcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_modelcode(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.ModelCode)
}

// string MachineNo = 3;
inline void MachineConfig::clear_machineno() {
  machineno_.ClearToEmpty();
}
inline const std::string& MachineConfig::machineno() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.MachineNo)
  return _internal_machineno();
}
inline void MachineConfig::set_machineno(const std::string& value) {
  _internal_set_machineno(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.MachineNo)
}
inline std::string* MachineConfig::mutable_machineno() {
  // @@protoc_insertion_point(field_mutable:network_messages.MachineConfig.MachineNo)
  return _internal_mutable_machineno();
}
inline const std::string& MachineConfig::_internal_machineno() const {
  return machineno_.Get();
}
inline void MachineConfig::_internal_set_machineno(const std::string& value) {
  
  machineno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MachineConfig::set_machineno(std::string&& value) {
  
  machineno_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network_messages.MachineConfig.MachineNo)
}
inline void MachineConfig::set_machineno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machineno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network_messages.MachineConfig.MachineNo)
}
inline void MachineConfig::set_machineno(const char* value,
    size_t size) {
  
  machineno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network_messages.MachineConfig.MachineNo)
}
inline std::string* MachineConfig::_internal_mutable_machineno() {
  
  return machineno_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MachineConfig::release_machineno() {
  // @@protoc_insertion_point(field_release:network_messages.MachineConfig.MachineNo)
  return machineno_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MachineConfig::set_allocated_machineno(std::string* machineno) {
  if (machineno != nullptr) {
    
  } else {
    
  }
  machineno_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), machineno,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network_messages.MachineConfig.MachineNo)
}

// uint32 Version = 4;
inline void MachineConfig::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::version() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.Version)
  return _internal_version();
}
inline void MachineConfig::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void MachineConfig::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.Version)
}

// uint32 SubVersion = 5;
inline void MachineConfig::clear_subversion() {
  subversion_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_subversion() const {
  return subversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::subversion() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.SubVersion)
  return _internal_subversion();
}
inline void MachineConfig::_internal_set_subversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  subversion_ = value;
}
inline void MachineConfig::set_subversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subversion(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.SubVersion)
}

// bool NeedLicense = 6;
inline void MachineConfig::clear_needlicense() {
  needlicense_ = false;
}
inline bool MachineConfig::_internal_needlicense() const {
  return needlicense_;
}
inline bool MachineConfig::needlicense() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.NeedLicense)
  return _internal_needlicense();
}
inline void MachineConfig::_internal_set_needlicense(bool value) {
  
  needlicense_ = value;
}
inline void MachineConfig::set_needlicense(bool value) {
  _internal_set_needlicense(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.NeedLicense)
}

// bool HasDoor = 13;
inline void MachineConfig::clear_hasdoor() {
  hasdoor_ = false;
}
inline bool MachineConfig::_internal_hasdoor() const {
  return hasdoor_;
}
inline bool MachineConfig::hasdoor() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.HasDoor)
  return _internal_hasdoor();
}
inline void MachineConfig::_internal_set_hasdoor(bool value) {
  
  hasdoor_ = value;
}
inline void MachineConfig::set_hasdoor(bool value) {
  _internal_set_hasdoor(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.HasDoor)
}

// bool HasErm = 14;
inline void MachineConfig::clear_haserm() {
  haserm_ = false;
}
inline bool MachineConfig::_internal_haserm() const {
  return haserm_;
}
inline bool MachineConfig::haserm() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.HasErm)
  return _internal_haserm();
}
inline void MachineConfig::_internal_set_haserm(bool value) {
  
  haserm_ = value;
}
inline void MachineConfig::set_haserm(bool value) {
  _internal_set_haserm(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.HasErm)
}

// bool BUpTDownConfig = 17;
inline void MachineConfig::clear_buptdownconfig() {
  buptdownconfig_ = false;
}
inline bool MachineConfig::_internal_buptdownconfig() const {
  return buptdownconfig_;
}
inline bool MachineConfig::buptdownconfig() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.BUpTDownConfig)
  return _internal_buptdownconfig();
}
inline void MachineConfig::_internal_set_buptdownconfig(bool value) {
  
  buptdownconfig_ = value;
}
inline void MachineConfig::set_buptdownconfig(bool value) {
  _internal_set_buptdownconfig(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.BUpTDownConfig)
}

// float PrinterUnit = 7;
inline void MachineConfig::clear_printerunit() {
  printerunit_ = 0;
}
inline float MachineConfig::_internal_printerunit() const {
  return printerunit_;
}
inline float MachineConfig::printerunit() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.PrinterUnit)
  return _internal_printerunit();
}
inline void MachineConfig::_internal_set_printerunit(float value) {
  
  printerunit_ = value;
}
inline void MachineConfig::set_printerunit(float value) {
  _internal_set_printerunit(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.PrinterUnit)
}

// uint32 ZUpperLimit = 8;
inline void MachineConfig::clear_zupperlimit() {
  zupperlimit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_zupperlimit() const {
  return zupperlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::zupperlimit() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.ZUpperLimit)
  return _internal_zupperlimit();
}
inline void MachineConfig::_internal_set_zupperlimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  zupperlimit_ = value;
}
inline void MachineConfig::set_zupperlimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_zupperlimit(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.ZUpperLimit)
}

// uint32 ProjectorProtocol = 9;
inline void MachineConfig::clear_projectorprotocol() {
  projectorprotocol_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_projectorprotocol() const {
  return projectorprotocol_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::projectorprotocol() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.ProjectorProtocol)
  return _internal_projectorprotocol();
}
inline void MachineConfig::_internal_set_projectorprotocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  projectorprotocol_ = value;
}
inline void MachineConfig::set_projectorprotocol(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_projectorprotocol(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.ProjectorProtocol)
}

// uint32 NoOfMaskPoints = 10;
inline void MachineConfig::clear_noofmaskpoints() {
  noofmaskpoints_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_noofmaskpoints() const {
  return noofmaskpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::noofmaskpoints() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.NoOfMaskPoints)
  return _internal_noofmaskpoints();
}
inline void MachineConfig::_internal_set_noofmaskpoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  noofmaskpoints_ = value;
}
inline void MachineConfig::set_noofmaskpoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_noofmaskpoints(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.NoOfMaskPoints)
}

// uint32 MaxIntensity = 11;
inline void MachineConfig::clear_maxintensity() {
  maxintensity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_maxintensity() const {
  return maxintensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::maxintensity() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.MaxIntensity)
  return _internal_maxintensity();
}
inline void MachineConfig::_internal_set_maxintensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxintensity_ = value;
}
inline void MachineConfig::set_maxintensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxintensity(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.MaxIntensity)
}

// uint32 MinIntensity = 12;
inline void MachineConfig::clear_minintensity() {
  minintensity_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_minintensity() const {
  return minintensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::minintensity() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.MinIntensity)
  return _internal_minintensity();
}
inline void MachineConfig::_internal_set_minintensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minintensity_ = value;
}
inline void MachineConfig::set_minintensity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minintensity(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.MinIntensity)
}

// uint32 gProjectWidth = 15;
inline void MachineConfig::clear_gprojectwidth() {
  gprojectwidth_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_gprojectwidth() const {
  return gprojectwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::gprojectwidth() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.gProjectWidth)
  return _internal_gprojectwidth();
}
inline void MachineConfig::_internal_set_gprojectwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gprojectwidth_ = value;
}
inline void MachineConfig::set_gprojectwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gprojectwidth(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.gProjectWidth)
}

// uint32 gProjectHeight = 16;
inline void MachineConfig::clear_gprojectheight() {
  gprojectheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_gprojectheight() const {
  return gprojectheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::gprojectheight() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.gProjectHeight)
  return _internal_gprojectheight();
}
inline void MachineConfig::_internal_set_gprojectheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gprojectheight_ = value;
}
inline void MachineConfig::set_gprojectheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gprojectheight(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.gProjectHeight)
}

// uint32 rowId = 18;
inline void MachineConfig::clear_rowid() {
  rowid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_rowid() const {
  return rowid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::rowid() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.rowId)
  return _internal_rowid();
}
inline void MachineConfig::_internal_set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rowid_ = value;
}
inline void MachineConfig::set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rowid(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.rowId)
}

// uint32 MaxIntensitySensor = 27;
inline void MachineConfig::clear_maxintensitysensor() {
  maxintensitysensor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_maxintensitysensor() const {
  return maxintensitysensor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::maxintensitysensor() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.MaxIntensitySensor)
  return _internal_maxintensitysensor();
}
inline void MachineConfig::_internal_set_maxintensitysensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxintensitysensor_ = value;
}
inline void MachineConfig::set_maxintensitysensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxintensitysensor(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.MaxIntensitySensor)
}

// uint32 MinIntensitySensor = 28;
inline void MachineConfig::clear_minintensitysensor() {
  minintensitysensor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_minintensitysensor() const {
  return minintensitysensor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::minintensitysensor() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.MinIntensitySensor)
  return _internal_minintensitysensor();
}
inline void MachineConfig::_internal_set_minintensitysensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minintensitysensor_ = value;
}
inline void MachineConfig::set_minintensitysensor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minintensitysensor(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.MinIntensitySensor)
}

// bool HasPlunger = 19;
inline void MachineConfig::clear_hasplunger() {
  hasplunger_ = false;
}
inline bool MachineConfig::_internal_hasplunger() const {
  return hasplunger_;
}
inline bool MachineConfig::hasplunger() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.HasPlunger)
  return _internal_hasplunger();
}
inline void MachineConfig::_internal_set_hasplunger(bool value) {
  
  hasplunger_ = value;
}
inline void MachineConfig::set_hasplunger(bool value) {
  _internal_set_hasplunger(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.HasPlunger)
}

// uint32 TDownZHomePos = 20;
inline void MachineConfig::clear_tdownzhomepos() {
  tdownzhomepos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::_internal_tdownzhomepos() const {
  return tdownzhomepos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MachineConfig::tdownzhomepos() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.TDownZHomePos)
  return _internal_tdownzhomepos();
}
inline void MachineConfig::_internal_set_tdownzhomepos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tdownzhomepos_ = value;
}
inline void MachineConfig::set_tdownzhomepos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tdownzhomepos(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.TDownZHomePos)
}

// float vacuumTimer = 21;
inline void MachineConfig::clear_vacuumtimer() {
  vacuumtimer_ = 0;
}
inline float MachineConfig::_internal_vacuumtimer() const {
  return vacuumtimer_;
}
inline float MachineConfig::vacuumtimer() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.vacuumTimer)
  return _internal_vacuumtimer();
}
inline void MachineConfig::_internal_set_vacuumtimer(float value) {
  
  vacuumtimer_ = value;
}
inline void MachineConfig::set_vacuumtimer(float value) {
  _internal_set_vacuumtimer(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.vacuumTimer)
}

// float SensorSetPointVacuum = 22;
inline void MachineConfig::clear_sensorsetpointvacuum() {
  sensorsetpointvacuum_ = 0;
}
inline float MachineConfig::_internal_sensorsetpointvacuum() const {
  return sensorsetpointvacuum_;
}
inline float MachineConfig::sensorsetpointvacuum() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.SensorSetPointVacuum)
  return _internal_sensorsetpointvacuum();
}
inline void MachineConfig::_internal_set_sensorsetpointvacuum(float value) {
  
  sensorsetpointvacuum_ = value;
}
inline void MachineConfig::set_sensorsetpointvacuum(float value) {
  _internal_set_sensorsetpointvacuum(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.SensorSetPointVacuum)
}

// float SensorSetPoint = 23;
inline void MachineConfig::clear_sensorsetpoint() {
  sensorsetpoint_ = 0;
}
inline float MachineConfig::_internal_sensorsetpoint() const {
  return sensorsetpoint_;
}
inline float MachineConfig::sensorsetpoint() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.SensorSetPoint)
  return _internal_sensorsetpoint();
}
inline void MachineConfig::_internal_set_sensorsetpoint(float value) {
  
  sensorsetpoint_ = value;
}
inline void MachineConfig::set_sensorsetpoint(float value) {
  _internal_set_sensorsetpoint(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.SensorSetPoint)
}

// float SensorThreshold = 24;
inline void MachineConfig::clear_sensorthreshold() {
  sensorthreshold_ = 0;
}
inline float MachineConfig::_internal_sensorthreshold() const {
  return sensorthreshold_;
}
inline float MachineConfig::sensorthreshold() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.SensorThreshold)
  return _internal_sensorthreshold();
}
inline void MachineConfig::_internal_set_sensorthreshold(float value) {
  
  sensorthreshold_ = value;
}
inline void MachineConfig::set_sensorthreshold(float value) {
  _internal_set_sensorthreshold(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.SensorThreshold)
}

// float XShift = 25;
inline void MachineConfig::clear_xshift() {
  xshift_ = 0;
}
inline float MachineConfig::_internal_xshift() const {
  return xshift_;
}
inline float MachineConfig::xshift() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.XShift)
  return _internal_xshift();
}
inline void MachineConfig::_internal_set_xshift(float value) {
  
  xshift_ = value;
}
inline void MachineConfig::set_xshift(float value) {
  _internal_set_xshift(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.XShift)
}

// float YShift = 26;
inline void MachineConfig::clear_yshift() {
  yshift_ = 0;
}
inline float MachineConfig::_internal_yshift() const {
  return yshift_;
}
inline float MachineConfig::yshift() const {
  // @@protoc_insertion_point(field_get:network_messages.MachineConfig.YShift)
  return _internal_yshift();
}
inline void MachineConfig::_internal_set_yshift(float value) {
  
  yshift_ = value;
}
inline void MachineConfig::set_yshift(float value) {
  _internal_set_yshift(value);
  // @@protoc_insertion_point(field_set:network_messages.MachineConfig.YShift)
}

// -------------------------------------------------------------------

// MaterialConfig

// uint32 packetCode = 1;
inline void MaterialConfig::clear_packetcode() {
  packetcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaterialConfig::_internal_packetcode() const {
  return packetcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaterialConfig::packetcode() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.packetCode)
  return _internal_packetcode();
}
inline void MaterialConfig::_internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetcode_ = value;
}
inline void MaterialConfig::set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetcode(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.packetCode)
}

// string Name = 2;
inline void MaterialConfig::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MaterialConfig::name() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.Name)
  return _internal_name();
}
inline void MaterialConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.Name)
}
inline std::string* MaterialConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network_messages.MaterialConfig.Name)
  return _internal_mutable_name();
}
inline const std::string& MaterialConfig::_internal_name() const {
  return name_.Get();
}
inline void MaterialConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MaterialConfig::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network_messages.MaterialConfig.Name)
}
inline void MaterialConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network_messages.MaterialConfig.Name)
}
inline void MaterialConfig::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network_messages.MaterialConfig.Name)
}
inline std::string* MaterialConfig::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MaterialConfig::release_name() {
  // @@protoc_insertion_point(field_release:network_messages.MaterialConfig.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MaterialConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network_messages.MaterialConfig.Name)
}

// uint32 LayerThickness = 3;
inline void MaterialConfig::clear_layerthickness() {
  layerthickness_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaterialConfig::_internal_layerthickness() const {
  return layerthickness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaterialConfig::layerthickness() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.LayerThickness)
  return _internal_layerthickness();
}
inline void MaterialConfig::_internal_set_layerthickness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  layerthickness_ = value;
}
inline void MaterialConfig::set_layerthickness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_layerthickness(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.LayerThickness)
}

// uint32 BurnInLayers = 4;
inline void MaterialConfig::clear_burninlayers() {
  burninlayers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaterialConfig::_internal_burninlayers() const {
  return burninlayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaterialConfig::burninlayers() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.BurnInLayers)
  return _internal_burninlayers();
}
inline void MaterialConfig::_internal_set_burninlayers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  burninlayers_ = value;
}
inline void MaterialConfig::set_burninlayers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_burninlayers(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.BurnInLayers)
}

// float BurnInCureTime = 5;
inline void MaterialConfig::clear_burnincuretime() {
  burnincuretime_ = 0;
}
inline float MaterialConfig::_internal_burnincuretime() const {
  return burnincuretime_;
}
inline float MaterialConfig::burnincuretime() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.BurnInCureTime)
  return _internal_burnincuretime();
}
inline void MaterialConfig::_internal_set_burnincuretime(float value) {
  
  burnincuretime_ = value;
}
inline void MaterialConfig::set_burnincuretime(float value) {
  _internal_set_burnincuretime(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.BurnInCureTime)
}

// float NormalCureTime = 6;
inline void MaterialConfig::clear_normalcuretime() {
  normalcuretime_ = 0;
}
inline float MaterialConfig::_internal_normalcuretime() const {
  return normalcuretime_;
}
inline float MaterialConfig::normalcuretime() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.NormalCureTime)
  return _internal_normalcuretime();
}
inline void MaterialConfig::_internal_set_normalcuretime(float value) {
  
  normalcuretime_ = value;
}
inline void MaterialConfig::set_normalcuretime(float value) {
  _internal_set_normalcuretime(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.NormalCureTime)
}

// float BurnIntensity = 7;
inline void MaterialConfig::clear_burnintensity() {
  burnintensity_ = 0;
}
inline float MaterialConfig::_internal_burnintensity() const {
  return burnintensity_;
}
inline float MaterialConfig::burnintensity() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.BurnIntensity)
  return _internal_burnintensity();
}
inline void MaterialConfig::_internal_set_burnintensity(float value) {
  
  burnintensity_ = value;
}
inline void MaterialConfig::set_burnintensity(float value) {
  _internal_set_burnintensity(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.BurnIntensity)
}

// float Intensity = 8;
inline void MaterialConfig::clear_intensity() {
  intensity_ = 0;
}
inline float MaterialConfig::_internal_intensity() const {
  return intensity_;
}
inline float MaterialConfig::intensity() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.Intensity)
  return _internal_intensity();
}
inline void MaterialConfig::_internal_set_intensity(float value) {
  
  intensity_ = value;
}
inline void MaterialConfig::set_intensity(float value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.Intensity)
}

// uint32 rowId = 9;
inline void MaterialConfig::clear_rowid() {
  rowid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaterialConfig::_internal_rowid() const {
  return rowid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MaterialConfig::rowid() const {
  // @@protoc_insertion_point(field_get:network_messages.MaterialConfig.rowId)
  return _internal_rowid();
}
inline void MaterialConfig::_internal_set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rowid_ = value;
}
inline void MaterialConfig::set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rowid(value);
  // @@protoc_insertion_point(field_set:network_messages.MaterialConfig.rowId)
}

// -------------------------------------------------------------------

// MotionConfig

// uint32 packetCode = 1;
inline void MotionConfig::clear_packetcode() {
  packetcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_packetcode() const {
  return packetcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::packetcode() const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.packetCode)
  return _internal_packetcode();
}
inline void MotionConfig::_internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetcode_ = value;
}
inline void MotionConfig::set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetcode(value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.packetCode)
}

// string Name = 2;
inline void MotionConfig::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MotionConfig::name() const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Name)
  return _internal_name();
}
inline void MotionConfig::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Name)
}
inline std::string* MotionConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network_messages.MotionConfig.Name)
  return _internal_mutable_name();
}
inline const std::string& MotionConfig::_internal_name() const {
  return name_.Get();
}
inline void MotionConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MotionConfig::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network_messages.MotionConfig.Name)
}
inline void MotionConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network_messages.MotionConfig.Name)
}
inline void MotionConfig::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network_messages.MotionConfig.Name)
}
inline std::string* MotionConfig::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MotionConfig::release_name() {
  // @@protoc_insertion_point(field_release:network_messages.MotionConfig.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MotionConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network_messages.MotionConfig.Name)
}

// repeated uint32 Layer_Z_Raise = 3;
inline int MotionConfig::_internal_layer_z_raise_size() const {
  return layer_z_raise_.size();
}
inline int MotionConfig::layer_z_raise_size() const {
  return _internal_layer_z_raise_size();
}
inline void MotionConfig::clear_layer_z_raise() {
  layer_z_raise_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_layer_z_raise(int index) const {
  return layer_z_raise_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::layer_z_raise(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Layer_Z_Raise)
  return _internal_layer_z_raise(index);
}
inline void MotionConfig::set_layer_z_raise(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_z_raise_.Set(index, value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Layer_Z_Raise)
}
inline void MotionConfig::_internal_add_layer_z_raise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_z_raise_.Add(value);
}
inline void MotionConfig::add_layer_z_raise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_layer_z_raise(value);
  // @@protoc_insertion_point(field_add:network_messages.MotionConfig.Layer_Z_Raise)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::_internal_layer_z_raise() const {
  return layer_z_raise_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::layer_z_raise() const {
  // @@protoc_insertion_point(field_list:network_messages.MotionConfig.Layer_Z_Raise)
  return _internal_layer_z_raise();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::_internal_mutable_layer_z_raise() {
  return &layer_z_raise_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::mutable_layer_z_raise() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.MotionConfig.Layer_Z_Raise)
  return _internal_mutable_layer_z_raise();
}

// repeated uint32 Layer_Z_Lower = 4;
inline int MotionConfig::_internal_layer_z_lower_size() const {
  return layer_z_lower_.size();
}
inline int MotionConfig::layer_z_lower_size() const {
  return _internal_layer_z_lower_size();
}
inline void MotionConfig::clear_layer_z_lower() {
  layer_z_lower_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_layer_z_lower(int index) const {
  return layer_z_lower_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::layer_z_lower(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Layer_Z_Lower)
  return _internal_layer_z_lower(index);
}
inline void MotionConfig::set_layer_z_lower(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_z_lower_.Set(index, value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Layer_Z_Lower)
}
inline void MotionConfig::_internal_add_layer_z_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_z_lower_.Add(value);
}
inline void MotionConfig::add_layer_z_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_layer_z_lower(value);
  // @@protoc_insertion_point(field_add:network_messages.MotionConfig.Layer_Z_Lower)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::_internal_layer_z_lower() const {
  return layer_z_lower_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::layer_z_lower() const {
  // @@protoc_insertion_point(field_list:network_messages.MotionConfig.Layer_Z_Lower)
  return _internal_layer_z_lower();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::_internal_mutable_layer_z_lower() {
  return &layer_z_lower_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::mutable_layer_z_lower() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.MotionConfig.Layer_Z_Lower)
  return _internal_mutable_layer_z_lower();
}

// repeated uint32 Layer_Tilt_Raise = 5;
inline int MotionConfig::_internal_layer_tilt_raise_size() const {
  return layer_tilt_raise_.size();
}
inline int MotionConfig::layer_tilt_raise_size() const {
  return _internal_layer_tilt_raise_size();
}
inline void MotionConfig::clear_layer_tilt_raise() {
  layer_tilt_raise_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_layer_tilt_raise(int index) const {
  return layer_tilt_raise_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::layer_tilt_raise(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Layer_Tilt_Raise)
  return _internal_layer_tilt_raise(index);
}
inline void MotionConfig::set_layer_tilt_raise(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_tilt_raise_.Set(index, value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Layer_Tilt_Raise)
}
inline void MotionConfig::_internal_add_layer_tilt_raise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_tilt_raise_.Add(value);
}
inline void MotionConfig::add_layer_tilt_raise(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_layer_tilt_raise(value);
  // @@protoc_insertion_point(field_add:network_messages.MotionConfig.Layer_Tilt_Raise)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::_internal_layer_tilt_raise() const {
  return layer_tilt_raise_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::layer_tilt_raise() const {
  // @@protoc_insertion_point(field_list:network_messages.MotionConfig.Layer_Tilt_Raise)
  return _internal_layer_tilt_raise();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::_internal_mutable_layer_tilt_raise() {
  return &layer_tilt_raise_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::mutable_layer_tilt_raise() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.MotionConfig.Layer_Tilt_Raise)
  return _internal_mutable_layer_tilt_raise();
}

// repeated uint32 Layer_Tilt_Lower = 6;
inline int MotionConfig::_internal_layer_tilt_lower_size() const {
  return layer_tilt_lower_.size();
}
inline int MotionConfig::layer_tilt_lower_size() const {
  return _internal_layer_tilt_lower_size();
}
inline void MotionConfig::clear_layer_tilt_lower() {
  layer_tilt_lower_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_layer_tilt_lower(int index) const {
  return layer_tilt_lower_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::layer_tilt_lower(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Layer_Tilt_Lower)
  return _internal_layer_tilt_lower(index);
}
inline void MotionConfig::set_layer_tilt_lower(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_tilt_lower_.Set(index, value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Layer_Tilt_Lower)
}
inline void MotionConfig::_internal_add_layer_tilt_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_tilt_lower_.Add(value);
}
inline void MotionConfig::add_layer_tilt_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_layer_tilt_lower(value);
  // @@protoc_insertion_point(field_add:network_messages.MotionConfig.Layer_Tilt_Lower)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::_internal_layer_tilt_lower() const {
  return layer_tilt_lower_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::layer_tilt_lower() const {
  // @@protoc_insertion_point(field_list:network_messages.MotionConfig.Layer_Tilt_Lower)
  return _internal_layer_tilt_lower();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::_internal_mutable_layer_tilt_lower() {
  return &layer_tilt_lower_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::mutable_layer_tilt_lower() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.MotionConfig.Layer_Tilt_Lower)
  return _internal_mutable_layer_tilt_lower();
}

// repeated uint32 Layer_Overlift = 7;
inline int MotionConfig::_internal_layer_overlift_size() const {
  return layer_overlift_.size();
}
inline int MotionConfig::layer_overlift_size() const {
  return _internal_layer_overlift_size();
}
inline void MotionConfig::clear_layer_overlift() {
  layer_overlift_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_layer_overlift(int index) const {
  return layer_overlift_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::layer_overlift(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Layer_Overlift)
  return _internal_layer_overlift(index);
}
inline void MotionConfig::set_layer_overlift(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_overlift_.Set(index, value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Layer_Overlift)
}
inline void MotionConfig::_internal_add_layer_overlift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_overlift_.Add(value);
}
inline void MotionConfig::add_layer_overlift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_layer_overlift(value);
  // @@protoc_insertion_point(field_add:network_messages.MotionConfig.Layer_Overlift)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::_internal_layer_overlift() const {
  return layer_overlift_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::layer_overlift() const {
  // @@protoc_insertion_point(field_list:network_messages.MotionConfig.Layer_Overlift)
  return _internal_layer_overlift();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::_internal_mutable_layer_overlift() {
  return &layer_overlift_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::mutable_layer_overlift() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.MotionConfig.Layer_Overlift)
  return _internal_mutable_layer_overlift();
}

// repeated uint32 Layer_Breathe = 8;
inline int MotionConfig::_internal_layer_breathe_size() const {
  return layer_breathe_.size();
}
inline int MotionConfig::layer_breathe_size() const {
  return _internal_layer_breathe_size();
}
inline void MotionConfig::clear_layer_breathe() {
  layer_breathe_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_layer_breathe(int index) const {
  return layer_breathe_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::layer_breathe(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Layer_Breathe)
  return _internal_layer_breathe(index);
}
inline void MotionConfig::set_layer_breathe(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_breathe_.Set(index, value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Layer_Breathe)
}
inline void MotionConfig::_internal_add_layer_breathe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_breathe_.Add(value);
}
inline void MotionConfig::add_layer_breathe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_layer_breathe(value);
  // @@protoc_insertion_point(field_add:network_messages.MotionConfig.Layer_Breathe)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::_internal_layer_breathe() const {
  return layer_breathe_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::layer_breathe() const {
  // @@protoc_insertion_point(field_list:network_messages.MotionConfig.Layer_Breathe)
  return _internal_layer_breathe();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::_internal_mutable_layer_breathe() {
  return &layer_breathe_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::mutable_layer_breathe() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.MotionConfig.Layer_Breathe)
  return _internal_mutable_layer_breathe();
}

// repeated uint32 Layer_Settle = 9;
inline int MotionConfig::_internal_layer_settle_size() const {
  return layer_settle_.size();
}
inline int MotionConfig::layer_settle_size() const {
  return _internal_layer_settle_size();
}
inline void MotionConfig::clear_layer_settle() {
  layer_settle_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_layer_settle(int index) const {
  return layer_settle_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::layer_settle(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Layer_Settle)
  return _internal_layer_settle(index);
}
inline void MotionConfig::set_layer_settle(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_settle_.Set(index, value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Layer_Settle)
}
inline void MotionConfig::_internal_add_layer_settle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_settle_.Add(value);
}
inline void MotionConfig::add_layer_settle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_layer_settle(value);
  // @@protoc_insertion_point(field_add:network_messages.MotionConfig.Layer_Settle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::_internal_layer_settle() const {
  return layer_settle_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::layer_settle() const {
  // @@protoc_insertion_point(field_list:network_messages.MotionConfig.Layer_Settle)
  return _internal_layer_settle();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::_internal_mutable_layer_settle() {
  return &layer_settle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::mutable_layer_settle() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.MotionConfig.Layer_Settle)
  return _internal_mutable_layer_settle();
}

// repeated uint32 Layer_Tilt_Percent = 10;
inline int MotionConfig::_internal_layer_tilt_percent_size() const {
  return layer_tilt_percent_.size();
}
inline int MotionConfig::layer_tilt_percent_size() const {
  return _internal_layer_tilt_percent_size();
}
inline void MotionConfig::clear_layer_tilt_percent() {
  layer_tilt_percent_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_layer_tilt_percent(int index) const {
  return layer_tilt_percent_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::layer_tilt_percent(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Layer_Tilt_Percent)
  return _internal_layer_tilt_percent(index);
}
inline void MotionConfig::set_layer_tilt_percent(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_tilt_percent_.Set(index, value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Layer_Tilt_Percent)
}
inline void MotionConfig::_internal_add_layer_tilt_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  layer_tilt_percent_.Add(value);
}
inline void MotionConfig::add_layer_tilt_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_layer_tilt_percent(value);
  // @@protoc_insertion_point(field_add:network_messages.MotionConfig.Layer_Tilt_Percent)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::_internal_layer_tilt_percent() const {
  return layer_tilt_percent_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MotionConfig::layer_tilt_percent() const {
  // @@protoc_insertion_point(field_list:network_messages.MotionConfig.Layer_Tilt_Percent)
  return _internal_layer_tilt_percent();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::_internal_mutable_layer_tilt_percent() {
  return &layer_tilt_percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MotionConfig::mutable_layer_tilt_percent() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.MotionConfig.Layer_Tilt_Percent)
  return _internal_mutable_layer_tilt_percent();
}

// uint32 Cut_Off_Layers = 11;
inline void MotionConfig::clear_cut_off_layers() {
  cut_off_layers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_cut_off_layers() const {
  return cut_off_layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::cut_off_layers() const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Cut_Off_Layers)
  return _internal_cut_off_layers();
}
inline void MotionConfig::_internal_set_cut_off_layers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cut_off_layers_ = value;
}
inline void MotionConfig::set_cut_off_layers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cut_off_layers(value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Cut_Off_Layers)
}

// uint32 Final_OverLift = 12;
inline void MotionConfig::clear_final_overlift() {
  final_overlift_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_final_overlift() const {
  return final_overlift_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::final_overlift() const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Final_OverLift)
  return _internal_final_overlift();
}
inline void MotionConfig::_internal_set_final_overlift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  final_overlift_ = value;
}
inline void MotionConfig::set_final_overlift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_final_overlift(value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Final_OverLift)
}

// uint32 Base_Layer_settle = 13;
inline void MotionConfig::clear_base_layer_settle() {
  base_layer_settle_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_base_layer_settle() const {
  return base_layer_settle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::base_layer_settle() const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.Base_Layer_settle)
  return _internal_base_layer_settle();
}
inline void MotionConfig::_internal_set_base_layer_settle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  base_layer_settle_ = value;
}
inline void MotionConfig::set_base_layer_settle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_layer_settle(value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.Base_Layer_settle)
}

// uint32 rowId = 14;
inline void MotionConfig::clear_rowid() {
  rowid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::_internal_rowid() const {
  return rowid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MotionConfig::rowid() const {
  // @@protoc_insertion_point(field_get:network_messages.MotionConfig.rowId)
  return _internal_rowid();
}
inline void MotionConfig::_internal_set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rowid_ = value;
}
inline void MotionConfig::set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rowid(value);
  // @@protoc_insertion_point(field_set:network_messages.MotionConfig.rowId)
}

// -------------------------------------------------------------------

// Job3D

// uint32 packetCode = 1;
inline void Job3D::clear_packetcode() {
  packetcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job3D::_internal_packetcode() const {
  return packetcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job3D::packetcode() const {
  // @@protoc_insertion_point(field_get:network_messages.Job3D.packetCode)
  return _internal_packetcode();
}
inline void Job3D::_internal_set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetcode_ = value;
}
inline void Job3D::set_packetcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetcode(value);
  // @@protoc_insertion_point(field_set:network_messages.Job3D.packetCode)
}

// string Name = 2;
inline void Job3D::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Job3D::name() const {
  // @@protoc_insertion_point(field_get:network_messages.Job3D.Name)
  return _internal_name();
}
inline void Job3D::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network_messages.Job3D.Name)
}
inline std::string* Job3D::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network_messages.Job3D.Name)
  return _internal_mutable_name();
}
inline const std::string& Job3D::_internal_name() const {
  return name_.Get();
}
inline void Job3D::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Job3D::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network_messages.Job3D.Name)
}
inline void Job3D::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network_messages.Job3D.Name)
}
inline void Job3D::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network_messages.Job3D.Name)
}
inline std::string* Job3D::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Job3D::release_name() {
  // @@protoc_insertion_point(field_release:network_messages.Job3D.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Job3D::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network_messages.Job3D.Name)
}

// uint64 Size = 3;
inline void Job3D::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Job3D::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Job3D::size() const {
  // @@protoc_insertion_point(field_get:network_messages.Job3D.Size)
  return _internal_size();
}
inline void Job3D::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void Job3D::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:network_messages.Job3D.Size)
}

// bool lastPacket = 4;
inline void Job3D::clear_lastpacket() {
  lastpacket_ = false;
}
inline bool Job3D::_internal_lastpacket() const {
  return lastpacket_;
}
inline bool Job3D::lastpacket() const {
  // @@protoc_insertion_point(field_get:network_messages.Job3D.lastPacket)
  return _internal_lastpacket();
}
inline void Job3D::_internal_set_lastpacket(bool value) {
  
  lastpacket_ = value;
}
inline void Job3D::set_lastpacket(bool value) {
  _internal_set_lastpacket(value);
  // @@protoc_insertion_point(field_set:network_messages.Job3D.lastPacket)
}

// repeated bytes fileBytes = 5;
inline int Job3D::_internal_filebytes_size() const {
  return filebytes_.size();
}
inline int Job3D::filebytes_size() const {
  return _internal_filebytes_size();
}
inline void Job3D::clear_filebytes() {
  filebytes_.Clear();
}
inline std::string* Job3D::add_filebytes() {
  // @@protoc_insertion_point(field_add_mutable:network_messages.Job3D.fileBytes)
  return _internal_add_filebytes();
}
inline const std::string& Job3D::_internal_filebytes(int index) const {
  return filebytes_.Get(index);
}
inline const std::string& Job3D::filebytes(int index) const {
  // @@protoc_insertion_point(field_get:network_messages.Job3D.fileBytes)
  return _internal_filebytes(index);
}
inline std::string* Job3D::mutable_filebytes(int index) {
  // @@protoc_insertion_point(field_mutable:network_messages.Job3D.fileBytes)
  return filebytes_.Mutable(index);
}
inline void Job3D::set_filebytes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:network_messages.Job3D.fileBytes)
  filebytes_.Mutable(index)->assign(value);
}
inline void Job3D::set_filebytes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:network_messages.Job3D.fileBytes)
  filebytes_.Mutable(index)->assign(std::move(value));
}
inline void Job3D::set_filebytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filebytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network_messages.Job3D.fileBytes)
}
inline void Job3D::set_filebytes(int index, const void* value, size_t size) {
  filebytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network_messages.Job3D.fileBytes)
}
inline std::string* Job3D::_internal_add_filebytes() {
  return filebytes_.Add();
}
inline void Job3D::add_filebytes(const std::string& value) {
  filebytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network_messages.Job3D.fileBytes)
}
inline void Job3D::add_filebytes(std::string&& value) {
  filebytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network_messages.Job3D.fileBytes)
}
inline void Job3D::add_filebytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filebytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network_messages.Job3D.fileBytes)
}
inline void Job3D::add_filebytes(const void* value, size_t size) {
  filebytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network_messages.Job3D.fileBytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Job3D::filebytes() const {
  // @@protoc_insertion_point(field_list:network_messages.Job3D.fileBytes)
  return filebytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Job3D::mutable_filebytes() {
  // @@protoc_insertion_point(field_mutable_list:network_messages.Job3D.fileBytes)
  return &filebytes_;
}

// uint32 rowId = 6;
inline void Job3D::clear_rowid() {
  rowid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job3D::_internal_rowid() const {
  return rowid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Job3D::rowid() const {
  // @@protoc_insertion_point(field_get:network_messages.Job3D.rowId)
  return _internal_rowid();
}
inline void Job3D::_internal_set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rowid_ = value;
}
inline void Job3D::set_rowid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rowid(value);
  // @@protoc_insertion_point(field_set:network_messages.Job3D.rowId)
}

// bool Md5 = 7;
inline void Job3D::clear_md5() {
  md5_ = false;
}
inline bool Job3D::_internal_md5() const {
  return md5_;
}
inline bool Job3D::md5() const {
  // @@protoc_insertion_point(field_get:network_messages.Job3D.Md5)
  return _internal_md5();
}
inline void Job3D::_internal_set_md5(bool value) {
  
  md5_ = value;
}
inline void Job3D::set_md5(bool value) {
  _internal_set_md5(value);
  // @@protoc_insertion_point(field_set:network_messages.Job3D.Md5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network_messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::network_messages::NetServerCommands_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::NetServerCommands_PacketType>() {
  return ::network_messages::NetServerCommands_PacketType_descriptor();
}
template <> struct is_proto_enum< ::network_messages::NetServerCommands_ProjectorCalibrate> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::NetServerCommands_ProjectorCalibrate>() {
  return ::network_messages::NetServerCommands_ProjectorCalibrate_descriptor();
}
template <> struct is_proto_enum< ::network_messages::NetServerCommands_PrintState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::NetServerCommands_PrintState>() {
  return ::network_messages::NetServerCommands_PrintState_descriptor();
}
template <> struct is_proto_enum< ::network_messages::NetServerCommands_ManualMVStep> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::NetServerCommands_ManualMVStep>() {
  return ::network_messages::NetServerCommands_ManualMVStep_descriptor();
}
template <> struct is_proto_enum< ::network_messages::NetClientRes_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::NetClientRes_PacketType>() {
  return ::network_messages::NetClientRes_PacketType_descriptor();
}
template <> struct is_proto_enum< ::network_messages::MachineConfig_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::MachineConfig_PacketType>() {
  return ::network_messages::MachineConfig_PacketType_descriptor();
}
template <> struct is_proto_enum< ::network_messages::MaterialConfig_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::MaterialConfig_PacketType>() {
  return ::network_messages::MaterialConfig_PacketType_descriptor();
}
template <> struct is_proto_enum< ::network_messages::MotionConfig_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::MotionConfig_PacketType>() {
  return ::network_messages::MotionConfig_PacketType_descriptor();
}
template <> struct is_proto_enum< ::network_messages::Job3D_PacketType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::network_messages::Job3D_PacketType>() {
  return ::network_messages::Job3D_PacketType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
